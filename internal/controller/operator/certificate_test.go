package operator

import (
	"context"
	"fmt"
	"path/filepath"
	"time"

	operatorv1alpha1 "github.com/IBM/ibm-iam-operator/api/operator/v1alpha1"
	certmgrv1 "github.com/IBM/ibm-iam-operator/internal/api/certmanager/v1"
	certmgrv1alpha1 "github.com/IBM/ibm-iam-operator/internal/api/certmanager/v1alpha1"
	ctrlcommon "github.com/IBM/ibm-iam-operator/internal/controller/common"
	testutil "github.com/IBM/ibm-iam-operator/test/utils"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	corev1 "k8s.io/api/core/v1"
	k8sErrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/discovery"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest"
)

var _ = Describe("Certificate handling", Ordered, func() {
	var r *AuthenticationReconciler
	var platformAuthSecretSecret *corev1.Secret
	var identityProviderSecretSecret *corev1.Secret
	var platformIdentityManagementSecret *corev1.Secret
	var samlAuthSecretSecret *corev1.Secret
	var authCR *operatorv1alpha1.Authentication
	//var cb fakeclient.ClientBuilder
	var cl client.WithWatch
	var dc *discovery.DiscoveryClient
	var scheme *runtime.Scheme
	var ctx context.Context
	var initObjects []client.Object
	var nsName string

	generateOldCerts := func(nns ...types.NamespacedName) (oldCerts []client.Object) {
		oldCerts = make([]client.Object, 0)
		for _, nn := range nns {
			oldCerts = append(oldCerts, &certmgrv1alpha1.Certificate{
				ObjectMeta: metav1.ObjectMeta{
					Name:      nn.Name,
					Namespace: nn.Namespace,
				},
				TypeMeta: metav1.TypeMeta{
					APIVersion: "certmanager.k8s.io/v1alpha1",
					Kind:       "Certificate",
				},
			})
		}
		return
	}

	BeforeAll(func() {
		By("bootstrapping test environment with Certificate CRDs")
		crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
			Paths: []string{filepath.Join(".", "testdata", "crds")},
		})
		Expect(crds).To(HaveLen(2))
		Expect(err).ToNot(HaveOccurred())

		scheme = runtime.NewScheme()
		Expect(corev1.AddToScheme(scheme)).To(Succeed())
		Expect(certmgrv1alpha1.AddToScheme(scheme)).To(Succeed())
		Expect(certmgrv1.AddToScheme(scheme)).To(Succeed())
		Expect(operatorv1alpha1.AddToScheme(scheme)).To(Succeed())
		cl, err = client.NewWithWatch(cfg, client.Options{Scheme: scheme})
		Expect(err).NotTo(HaveOccurred())

		dc, err = discovery.NewDiscoveryClientForConfig(cfg)
		Expect(err).NotTo(HaveOccurred())

		r = &AuthenticationReconciler{
			Client: &ctrlcommon.FallbackClient{
				Client: cl,
				Reader: cl,
			},
			DiscoveryClient: *dc,
		}
		ctx = context.Background()
		nsName = "certificate-test"
		ns := &corev1.Namespace{
			ObjectMeta: metav1.ObjectMeta{
				Name: nsName,
			},
		}
		err = r.Create(ctx, ns)
		Expect(err).ToNot(HaveOccurred())
	})

	Describe("removeV1Alpha1Cert", Ordered, func() {

		BeforeEach(func() {
			crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds")},
			})
			Expect(crds).To(HaveLen(2))
			Expect(err).ToNot(HaveOccurred())
			authCR = &operatorv1alpha1.Authentication{
				TypeMeta: metav1.TypeMeta{
					APIVersion: "operator.ibm.com/v1alpha1",
					Kind:       "Authentication",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "example-authentication",
					Namespace: nsName,
				},
			}
			platformAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lSQU5HTVl2U3BlN3N1ejdnSmgzZ3Z1Q1F3RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE0xV2hjTgpNalV3T1RNd01URXlNVE0xV2pBZ01SNHdIQVlEVlFRREV4VndiR0YwWm05eWJTMWhkWFJvTFhObGNuWnBZMlV3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURHZkp3M1RRRkdYN0VWM2dkdVdFT1UKY0ZrenVUK2h0QWJscmxTbWpOSk52VzN5WDN4UW16aExvdEE3a1FJRkd1ZEN6TmRzSEZTSGRIYXZibThETG0zbgpuOWFzalgvSjNPdjVaeTVTOVZHR0FSeS9FR0QvblorVlZZOU1sM2o1Z3ZDRmVhMXp3cUlFQUhXV3FuaFdpUWlKCjg0eXA2cld1U0hUb2NtYVFvZElxQTN0a01RbWg2Zm9XRWljNlFkWVhuYmlzdm9pWDJ0cDVMdCs0MWhqakJFMFgKNU8rbFlSSEtmY2p4QXV1UzUvd05ERDkzcVQ2Mm1PWk9kV2N1WGFSY1phUnNsSFdpVk9lT21PSWdyUUV6dlV1SwpTZExkUFhOVFFoRnZmN3ZvZ0dIVFNJMWJwMFhWS1lCakFRT0pkdUZHNmhwQnhiZzM5MHprOTl2UlhxOWFpTndwCkFnTUJBQUdqZXpCNU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVkKTUJhQUZKVG41NkYzRXppRFBPdHFmV2c3SGh0Rm1SZlVNRGdHQTFVZEVRUXhNQytDRlhCc1lYUm1iM0p0TFdGMQpkR2d0YzJWeWRtbGpaWWNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBdDF5M0ZNUXlZc2lzTU5jd3l4b0lPQ0NnWk15emZUcEpTeW8raWp5SDdRa0hNMnFwTm85aXBvbXAKWmdGaFRQUE5HVmYvNWNVOFI3Q3JUVHRhZWVrb3FEeGxyS2h5U2w5bkF5VFdieVBJWThKbzBGMmVnelBtaUVIKwpBZ3ozVU82THZ4UkNGeG9qS3RUcWxacDVUOTdFTFgxQ1FKc0NCVGtQKyttK3R0V1RVclU1YWF6bFJRQjJlTC92CllVTDFMcTErUUp1NzZSRGlKVS9hWmlGaTFDWURNMkdPSDRDaXI0ZXFvUnhrVXV4TjQ2Sm5QWWlLMmRyY0Q1bEMKdWp6dGxjZ3p0cWwrK1lCalUzMnBBYzhtNEpOTGhFMU9SY0NuaXRnK0lOQVNMbkVSUXhSckJSUFdwSm80TXl1eQo4K2ZtQlJaMjlZL1k0Z0VMM09mMTFnM05UY2FsMkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeG55Y04wMEJSbCt4RmQ0SGJsaERsSEJaTTdrL29iUUc1YTVVcG96U1RiMXQ4bDk4ClVKczRTNkxRTzVFQ0JScm5Rc3pYYkJ4VWgzUjJyMjV2QXk1dDU1L1dySTEveWR6citXY3VVdlZSaGdFY3Z4QmcKLzUyZmxWV1BUSmQ0K1lMd2hYbXRjOEtpQkFCMWxxcDRWb2tJaWZPTXFlcTFya2gwNkhKbWtLSFNLZ043WkRFSgpvZW42RmhJbk9rSFdGNTI0ckw2SWw5cmFlUzdmdU5ZWTR3Uk5GK1R2cFdFUnluM0k4UUxya3VmOERRdy9kNmsrCnRwam1UblZuTGwya1hHV2tiSlIxb2xUbmpwamlJSzBCTTcxTGlrblMzVDF6VTBJUmIzKzc2SUJoMDBpTlc2ZEYKMVNtQVl3RURpWGJoUnVvYVFjVzROL2RNNVBmYjBWNnZXb2pjS1FJREFRQUJBb0lCQUhBRVB6MU9iaHZEUVhOdgozSTIvcmxRRm03SC9LQlFnUDR3NytIWU9IMW5VUUVwNjdQT294ZnFacGg4WDFTWUFhdWRlSjIxU0I3cHlWZERuCjZDckpkeWt6SWJvOEdSUlpZNnRiT2QrRHAwQ1RQQi93SkczZURRUUFSMkVZVXlPdGJBUklDVVc5WUNZV0JFYkYKYWlpY0tYK0JQYTlmVUsxTkl2MVVJdUlaRVR5M3Y2RWRrb3IrYWxoOFU4OXpmOFhmZmxhWHJDR0V2TzNFVmM2VgpmZSs2UzZVVXZxVGZBZzZ1YXFmWUhVR0hLMWRZWjlOVDFBU2VFLytQVkJyQ2ZwZ0JiRElBenI4K0loYUI1QVdpCktOWlJmd2NxVG5Pelc3bWsvQ3BtRHVpc1ZKc3I3eS8vWWdEUDgwNzFNZUNHcmwzbDVhSDRhUThobWc1Q0lBdm0KV1hMc25Ba0NnWUVBN0dHM1k4dXNMOWtZUzVPdmlMcCtxaUZYK1YrQWdac3pzTEVXRENOaEhvWFNqM2hjUkhGagplSnZSM3NSRWhVUHJoQ0NDY0ZhekRMbDlxOFhZWXp5TWNKc0xKZmR4Z0xUMXdzcWhtWWRDTHRQQ0hrbytTaWkyClMxNG4yUEN4cEJTd1o0L0M3STQvOUxYRE9kK2VySGtkckNqUW5rZCtCcTU1MjhnQ3FhY1ZFajhDZ1lFQTF2WEMKU09lR1ZSQnNvUC9FWjltVFhXaHUxU1dvby9aWm44YVlmeHlVQnpEODB1eDhHR2hKRFhnTEN3MDB6MjdpK0VCMwpGakI4RWhzT2IrRTk2V0l2TWJma1hhS0ZYdEVWRXk5b1F0V0NiUU1aeTBOUk9mNFFNcWczcWlvd0U2d0RYNldxCjFLdytjY0dXVW9FU3BVTFRlcnkwOVpBYmhVK0JZREM5Z256TXA1Y0NnWUFrVk95VUNTVUJBYlFyUVpyVVFCM2gKMWxnb094YU1WU2QvdStnd20ydDgvb0tiakp0WjViZXRQUDNuNkhERHJ1blBHQlFVWWk4SkFLV2hOanFKSGpCVAp5bkRQT0JZWSt6ZGU1amdxV2REQlU4amRVUG43K2YveTI1anlUaVJ2bk1KMFdITlVXcFRYN3V2L3hEQW1RRU5nClI3R3c4am9ibXN1ZURVTGpnb3ZKandLQmdRQ2dnbEhZYmtqNEs1TnhoSW43b1pOUUpETGVKWWlQSmR3MldleDAKdmJvcXhJR0VYZUVydUhNVUE1YjdZWmtWYXc4L242Tk1obGVlaldWeVZSWU50cXJXelNGUWFaSjlBbEppU1B2cApLOVIvNGRqWTFpTkkwbFQxL25YU01qNUQ4aVZ5dmhtWlJDUThmUGpxRWtjQjc2eEo4YTZOemxVK2JlZUZFOS91CkY1SVpjUUtCZ0dEeDN4OVhYbkxweWQ4TnRlTDIvdzh5a2taaFRvcFZURi9DdnpaRFhJRTEwd3ZXNWhGTlEzOFQKeUNiOTFCTC9kZWFGS3NQSVpYNnlROFNTbGxwTUlSZTBLWVdsN25qdDVtbUh0dzc1K054em8zRHlIQk1EWjNvLwpJeUNnbFhpMWhKSFJJTi8rNUwyK0lIMytad0dVQW00bWtCZlphTWhEL0FPdDJTR3JsbitMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="),
				},
			}
			platformIdentityManagementSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRQ2xraXpINnNGcUgyN3lYRXFXM2ZCREFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNek5hRncweQpOVEE1TXpBeE1USXhNek5hTUNjeEpUQWpCZ05WQkFNVEhIQnNZWFJtYjNKdExXbGtaVzUwYVhSNUxXMWhibUZuClpXMWxiblF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2k0OHZKc0orcnV2UGMKVnpzM3JvRlB4dGphZmFoOE9EZmFudFV2ZFdHMHpGZ0txdXFjUzBnbjJoN2FxUUlpUnlySDdnRlF1R3o2M1V1YQpzcHMyZFQ0TDIvOUdiU1N5SHFNN0JhOE1VVnhSRktEaSt3cytzMElPb2hHbmlxUTZBTXNUbjc3OExPK0E1UVVlCkJsMGVFMEJwYzY5RUowK0NORkZIRFBhemxBVWNxVm11RWlmY2JnMUVYWjk0RHk5SGNCeU5uNTRLakxNaFlqV1oKb3pmTUovd2J0MEpTYzdYemdmWGtIWWsyVFlVSy8vNGRzOS93U21UV2VkRHhCRW5KYkRCVkZxUi9Uc0RYWG1aeApPWVhSZllJa1VOTkozM1FlNDJyRFE0OGxCbG1IcGhScXlacjMvL2I2QSswVCs3bTliVEVsUjFVRWp6ak9hWTBKCk53YVFwTkl2QWdNQkFBR2pnWkl3Z1k4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWxPZm5vWGNUT0lNODYycDlhRHNlRzBXWkY5UXdUZ1lEVlIwUkJFY3dSWUljY0d4aApkR1p2Y20wdGFXUmxiblJwZEhrdGJXRnVZV2RsYldWdWRJSWxjR3hoZEdadmNtMHRhV1JsYm5ScGRIa3RiV0Z1CllXZGxiV1Z1ZEM0d01pMXpMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWUyWCtUaW9TdFVMYk9sS1EKcE8zWUY0TDlRazViSW9XVjl1RkRCOEZpQ2ppaTVDQm5CckJmcm8vd3d6YXhiWStONnBqZTBLZUJRVHFCbHc4TQpSMEhaSWF6UnVWUmlWaTFLS20vN3gzRHI5MEg4dnhVZ3IzZ3hiUm1Iemt5eEFJK2ZjNHdrUHA4LzB5WHArRVZPCm43QVNUTkNYd3RhS0pydEFLaGFUcW5CNVBGN3NIb0Rob1liYkNkaDNYb1gzUlhLR1RMNzlNSVJja1RkV1QyUDkKWWVPZmRTZWQwY2RPWW9xcEozSXF6dVBNOC9tZlZMVE5pRlJQUnNIQzVUelZUdDlzVDFjVWdpdXR1eHJuRnFWNwphMTlIL2pZYnhHdm1ZVmh3d2Y0NTh6LzRwRmJqcnBudzNrK2JGNGh0ZDBGT044WSs0cGZKK204cE5XZzRqZGFsClhiK0c0UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb3VQTHliQ2ZxN3J6M0ZjN042NkJUOGJZMm4yb2ZEZzMycDdWTDNWaHRNeFlDcXJxCm5FdElKOW9lMnFrQ0lrY3F4KzRCVUxocyt0MUxtcktiTm5VK0M5di9SbTBrc2g2ak93V3ZERkZjVVJTZzR2c0wKUHJOQ0RxSVJwNHFrT2dETEU1KysvQ3p2Z09VRkhnWmRIaE5BYVhPdlJDZFBnalJSUnd6MnM1UUZIS2xacmhJbgozRzROUkYyZmVBOHZSM0FjalorZUNveXpJV0kxbWFNM3pDZjhHN2RDVW5PMTg0SDE1QjJKTmsyRkN2LytIYlBmCjhFcGsxbm5ROFFSSnlXd3dWUmFrZjA3QTExNW1jVG1GMFgyQ0pGRFRTZDkwSHVOcXcwT1BKUVpaaDZZVWFzbWEKOS8vMitnUHRFL3U1dlcweEpVZFZCSTg0em1tTkNUY0drS1RTTHdJREFRQUJBb0lCQVFDR3JxdFZmTURKRWErSQp4R2VtUnBlTkN2RksxeE4wZ2xkTVlJQU0yWldNRkZuSG1FS2NNSExjNExFYVF4d01rNk4vNC84YWF5TlEyYUVsCnJBQkNLdmErZjR5M0FvK1E1MXczOVI4anBESWNxRjNPejV3Z243OUNzaWErelJlMURlcmJzdjRMTEd4cnV2RmMKUGc3SVMwcTY1bmhJZGVoNzFCNVFEUnYrcDZrQ1pJSXdwd093VjVnR0p5V0JoL0xCckJ6MkZpWUliQU9vNnNTdQpNbTZ5ZUhxM1dHcFUwN3BJUUZhdVRML0ZvTVNPbWs3NGxBN0ZuQWpoTVdxM0xnRzdiS28xS25aeXRpTndNTFcvCmNrSmFJT0hOaGJpYmJmLzF6TWxvREwyTlJxajlCbzRWc2RtZ0JqYmtSWno0VG5HWW9BaEVwVzNWVHgyaVd5a2QKT3ZiVkJyMGhBb0dCQU1JNXl0aGNobXpIaHl6dkJOQmd2Njl0M28zRStmM2Y3RTBOM24rTDdXb2NzS21uUjA2UgpNa01HOVhWK1ZVR2NvVXE0QTdNNmJ0a1V4SlBYR0wvNUpwWDZEVWFVRFBOVWJCS0djZjQra1BPeVVSSzMrMHBTCnBRb1ljUENSOU1mWTBodjBwMlZwSGhYVERxSUFJWGdpS01SSktYbnpOVFdRL2diRkZRYXpHM1ZkQW9HQkFOYXkKazZ3aStNMStFZVpHL083M0xEODdOMGloUUtNaEFLNkNHT2NFWXFWRnF1Rmw0djRXemdNdTdXUTZidTFsTVBaUgpQdnZReGRjWUNjM1FING4rNnUwMkNHTFRvZitGZFk4OERsM1kzYmp6M05iT2NjTSthcmJReHVvZHFOU0s2Qm1wCm9QU3MzM2M5blE1M0duRGtRbVlsNjhRNklKSDdjanhJS0ZScFQ4RDdBb0dBZlVNK2twbmh6R2hHd3ZFSVhzZjIKK0ZKWXRZQXpac3V6SCtMdys3dW9DOGFqSFZlWVFwQ2NKT1JwRERURkVZTE45MTJFYldRak4zZ1FhL1RPcm9rbQpuSlZmV0lTRmNhMmg0YlM1OGlveDNDbkY1ZGVvaHIrVVYxVjZDWDFvckRjbkV3YVBxM1RIQlhaUU9xVHc4UVMrCjNCRC9ZZm83OStjaUhnV2ZVT25VckxVQ2dZRUF6aTRXaE5QYzdiTHBTNlRXbUVLRW1vQ3FtYlJKMTU4RkFaRnMKaXNaNldVOXJTQ1JKZGt1K01lNXFDYnZYOVdFZFFSOUxCaGM3TjFJZGNDb3piNW1BVUtkNExEZ2pOYmtiNlo3NgpDUVFRQWVNbkxKNTdQODM4TzI2SjZDRHRscGVEUjhuUUNjak9uYnRzell4eHR3SnVCWnpiS3NuTHA0VzY4Y3MxCjk4SmUxZXNDZ1lCUENzdUhkZ1krdTRadHFvVnZ1YXlLU3BhUm1WRjFlU0krR1NaZ201aUQvQmRDTFN0SlVZeXYKNm5WZkxlWEJmWis0TG5kdG9hTWRNaVJuaE41T3dCUDk3ZlgvK2s0cmVpOUNjVUVObDJQT2NaN2NFQlYySllkVApJTmR2MjVhcnhraTJwMCs2cGw4Q0VWVFhCSy9kMkpLMk1MY244ZlRnMklPK3ZGNnNCZnM5YWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			identityProviderSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "identity-provider-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXekNDQWtPZ0F3SUJBZ0lSQUp2VHMwVDRrcitGL1VFY1dUanlWek13RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE16V2hjTgpNalV3T1RNd01URXlNVE16V2pBbE1TTXdJUVlEVlFRREV4cHdiR0YwWm05eWJTMXBaR1Z1ZEdsMGVTMXdjbTkyCmFXUmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLdjdtTzZuRHlCbTRlVngKNzFpa0J6bXMzSnNjcHBncGl5VDk2SFJ4R3p5WEJLb0owMytvaW1TZU55dmk0MkNEaHEyRlBCQmhucTJqZEdvdQptY2ZGTXZBVnpCcTRhMktkRWQyOEdVak1jYi92UkdPV2RKdS9xSUVYWjdyTUQwOVpwQ1ZOVDF6VEE2a29Gd1VnCmxyZjZuQW1UU0ttNlV2SlJSbjdXK0tFYW9NVktOWjdleVB6T004K0NPODEzaDZCUjQ3NVkxalROeVRTa3NyMTcKN3JBdVdYY0tQMWRNblFqZlFpdTFDUzlPNUdCZHk1cHpJdEppR2Zoa2lTNDlGS0Z3SkYyeU02OXNEOExBTDNQSApBRUs2UEtVL1BTaTJ3TzZxemFiNGVYRlhNZ1RCSjNwTWtsdkJmc2wwWTAvVVBjMUxxSWhuSnNxakVnYUwwNWNsCm5KSm0yQjBDQXdFQUFhT0JqakNCaXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTVTUrZWhkeE00Z3p6cmFuMW9PeDRiUlprWDFEQktCZ05WSFJFRVF6QkJnaHB3YkdGMApabTl5YlMxcFpHVnVkR2wwZVMxd2NtOTJhV1JsY29JamNHeGhkR1p2Y20wdGFXUmxiblJwZEhrdGNISnZkbWxrClpYSXVNREl0Y3k1emRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnVDVW5ZYVF5Tm5vWmlXTFZUVFF2dTAKK0FBTUZGWGpJT1VkMUV2ZnRyWVhwYkJRbHlJYU1qU2Iyd25oNEdBd25CWUh1emRzWFFwQ2t0WHRESmJvWnBsKwp6Mk1CVkJMYjNqaDJ4WGttdVVubWhFQmZFcXJicUo5L0puekd2NndkVGUxVmNLbUNCbHlsRjhvWDRQOGtIZVRhCmczMGFBdjRsK01VVldka29BMG1jUENSZHczOHN0VkdvQ3cyeUxPUWVNN1FtWHlkK2tLRzdMT0d1WFIxR2gzM3EKNjJYV1NDMzlFUEc5ZjZzMlFRWjJuMXZtMzMvTVJLZ3V5VFV6aHFZMnh2VzB0SXRJck80MUtZNDlxQ21zMEpxRQowVzJ0cEdxazd2aFFlUlhsUGFtZlhUWUZ6SE5pSnZLM1BjWjJBK2tCNXYyTVZ3TkZaRGl5WldlMDFtK2JNTUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcS91WTdxY1BJR2JoNVhIdldLUUhPYXpjbXh5bW1DbUxKUDNvZEhFYlBKY0VxZ25UCmY2aUtaSjQzSytMallJT0dyWVU4RUdHZXJhTjBhaTZaeDhVeThCWE1HcmhyWXAwUjNid1pTTXh4dis5RVk1WjAKbTcrb2dSZG51c3dQVDFta0pVMVBYTk1EcVNnWEJTQ1d0L3FjQ1pOSXFicFM4bEZHZnRiNG9ScWd4VW8xbnQ3SQovTTR6ejRJN3pYZUhvRkhqdmxqV05NM0pOS1N5dlh2dXNDNVpkd28vVjB5ZENOOUNLN1VKTDA3a1lGM0xtbk1pCjBtSVorR1NKTGowVW9YQWtYYkl6cjJ3UHdzQXZjOGNBUXJvOHBUODlLTGJBN3FyTnB2aDVjVmN5Qk1FbmVreVMKVzhGK3lYUmpUOVE5elV1b2lHY215cU1TQm92VGx5V2NrbWJZSFFJREFRQUJBb0lCQUdrQit0T2tueURLa0p6Mgpud3hCUXNRZFhxazZxaUY0SkNSVy82cXhNTThpNms4a0pzWG9VMit5QnIrK0RkVHRHYnN6QVlTREJrN0E0YUMvCmlWZW5lVDJNSVk0akVqWW83ekt5MmNGUVN4ZkU4TDNacktNNE41dHlmZnhaQWZRU0tKNDZBUDROUFV2NFZXM2wKQXdHY2U4K0E1VG4wc1JhUk4zalVxd1E2N1BUb0pVc2JMVGV2d3FFVUtGbVgzVXFaT3dGT2x0cmJ6bEhSN2hHNApQRGRKSEdvd0V0REhKYjlDY1huY1I4Q1hDdnh0R2xEYzdxSkVBNUNXV0NheTYzR3gydm5oa3EyTU9kNEdwb2UrCm1ydGJmZGFXWjB5YzJLUEphdG96R1NGWXBVQVluNyt4dVpMSFpGdWdNMnZOWDZ2RllvQ2ZzZHJXcmdXN2RBUWUKZG93UG9tVUNnWUVBeXZPcGQ3MWx4dXkrYUZKMEcyYkdidHMrYjkzNWhiU2ppNk5wa0lQSk5UcXUveTF5eC9xQwpybHlyZFI4MXZ6SUc2ZXFmNnAwVGZQdC9NZkVJdVJ1YVNiNkJBZll6VmdiMDVBa3pCTE45VG1iYkxBNEE3eU44CmZkbk13Q0dXdWFsaGNHaHN3T2ZvWU9oaW16TlVodVVrS012bHk3MlBybjA1NlRIOXdwQ3R2Z2NDZ1lFQTJPK3MKSWEwT2VSbVB6NVJmUVRFSi9BYlBpL3JUMGpOdUZkelFFZWQvU2x0dTBJSFJjckpnTGxDMG51YTRTQ2o3Nk10MgpERkhGc3dMT3piOTZlV3ZYQ2lhOEVEbVR4NmpYVXk0eitpcERaQlpHd1BTQXVXVkVTaS9TZG1JbGVMNFFaN0ZZCklUYnYwSVR2SE4rRXJRMjZIN093S2ZJeUxNb2NvYkJybmZzb2I3c0NnWUEzSXoyK1gwRmdhdjlML21LMjh4UWsKR0FKOWgvUDdoRmtPWGVZWE1nYWZKSU5ZcG5OUnExaUhvSHVnaFVzbjE2S1RPSUFiMEhMeitLdlUyS1JERGlHNwp1VHI1V25jVi95dlhMRHlsSVZLQTAyYm1NQ1BHMUlCRS9NQW96cmRSVjVnMlh0aDFERXhRejdIQ2NvNmJXM09ZCmRkVEhwb2Q3bzEveFgvaU9QSnBIVHdLQmdRRFRzSTE0RHplZ1ZLRlJIcWdWSlpWb3FmeTl5L1lIbU1oRDdVWGQKTXRtejVhVXRNb0VBTzdBL2dlRy9iY1ZHSlRnczR0NC9CMHkwY25qN3JXNEdMb1daRWxOU1FkMURhQzgyckU5cwpQdkdrS1ZqQjBkWUxGQmFmamlzQitxUTJQc0lqYlp0aVRnbVdvU0gwT3VsdE5ZZjZoNDNRWU5jMWZjU1N3MlZBCnRHV3hJUUtCZ1FDOHpQV0J6bUdYL3dHbHVWY1MvTTVRekxNWDlJcm10MjkwdHJqeXBxeFJ6ekJuT0xNQTRZd3IKRVBGUWhuY2JJOUdkN3VXeXhrZVNxcFh3WXNyazkyMGZuWUdFTGhOOHNDRVYrNVVEUStFT1R6ZDVxTCtLYkFpagp3U1BxakliS3d0V0t3TDRPcmg0clkwY1lqYmV2K0ZDUm4xOWNReHREa0libUQ3SGVtV1d5R3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			samlAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "saml-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRYkR4ZnNjdkNiVnZEdURDYXdheS9QVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNelJhRncweQpOVEE1TXpBeE1USXhNelJhTUJReEVqQVFCZ05WQkFNVENYTmhiV3d0WVhWMGFEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPNUZiYkVGUXU5Y2lKUXdvNUtUdXpOVGRQRWI5NjhEZW9CUTN4ajkKVWRjTjFiNDZuM3NDTFNNdnZ1Zk4zRTFHTnZQUW5YYVhMcUpWL0xPMTFjeDN5a2ZibEI4amgxRlF5eGpUQmk3NQpqYXpmVzJ6Z21iMy9ZaU0zRWtjaHFEakYwcElWaE9pUEVQWG1pYzJkNTAzTXgxUTNWL05UL1BpdDdmUUdoMTYvClFWd3lQeVBubyt3QTFIeDl0cS9PSWtFb0d3dzZ5S3M1VnhhQVNidUd1clZSQ0MvQytIeFJRYUdzcWdqZjhYOE0Kb1Y4cWZRU2tGVGg5dHpDMGlqd2dQT1NqVksyMys0OUptdm4waGxkZGxmMi9jYTlyNkxXaUNBb3JuMklPYTJaZQp1TWV2RE9Tc2ZlMVU1L3NqdllQSHhlUzVsWHdMSkNNcUU3WmxxbWg3bGZXVTR2VUNBd0VBQWFOWE1GVXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVsT2Zub1hjVE9JTTgKNjJwOWFEc2VHMFdaRjlRd0ZBWURWUjBSQkEwd0M0SUpjMkZ0YkMxaGRYUm9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBUGttdk5pbFFKdnN3TTduZVVMUFdYejhSd1NpNTBPcDNuQ3dtRVpTMWZHL2liMSt2ZmlZUUtkQXkvCkNoeTNWL0ZWR0p1empuWnFZRXZWRzZ1OTlnelllcTNlWkhsZG5kMDZJanRnbkVxcmVuWmp1Rm5tUnlxeHpnUVcKbjl2QmlOT0k4cUwvYS9USWNDRUZ3d2Y5ZjNWMktpNEZPTHhyeWhHc1VYMDRxaEhYNU9QdDZiTWtGSk5FUzBOawpqRkJWaDZycUlJK25FT2daQ0d5WHZiS2RiN01wRlNwQWVtcldaVHE2THFWcjJQUmUyZGV3R3lPcHdobHlFYUdyCnNSMlBESEpwa21HV3dvTkdmVUF6anArZU1JQkZySFB3bW96empkUFo5YUtmSUhIM0JxeWIrdGV6T2ZndXErRkQKZlR0a1AxU1AweGo3c0lDc2plMk1hbXNCcWIvMwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN2tWdHNRVkM3MXlJbERDamtwTzdNMU4wOFJ2M3J3TjZnRkRmR1AxUjF3M1Z2anFmCmV3SXRJeSsrNTgzY1RVWTI4OUNkZHBjdW9sWDhzN1hWekhmS1I5dVVIeU9IVVZETEdOTUdMdm1Ock45YmJPQ1oKdmY5aUl6Y1NSeUdvT01YU2toV0U2SThROWVhSnpaM25UY3pIVkRkWDgxUDgrSzN0OUFhSFhyOUJYREkvSStlago3QURVZkgyMnI4NGlRU2diRERySXF6bFhGb0JKdTRhNnRWRUlMOEw0ZkZGQm9heXFDTi94Znd5aFh5cDlCS1FWCk9IMjNNTFNLUENBODVLTlVyYmY3ajBtYStmU0dWMTJWL2I5eHIydm90YUlJQ2l1ZllnNXJabDY0eDY4TTVLeDkKN1ZUbit5TzlnOGZGNUxtVmZBc2tJeW9UdG1XcWFIdVY5WlRpOVFJREFRQUJBb0lCQVFEbFZNRzlEZGxjMU8xSAo1SUNyaGJFNk4ydG8zWWhKVk1uRlV4RkgxaG05S1QyK3VHSGpYVGJnbFFYanlrbnR2bFVKMnBLVUgvTHNvR0oyCi9kN255NnhQK1ZIWm5yS1JXM2YvVHF5MjdjNmt3dDRXTHg4S3RoRlkzNXFpQ0EwSGg2K2lseit6TG5BZW5XT3AKR2dBVTY3STJwb1hxVjc0MkJBSHhTNDlqYkNXV2U1SzcxeExGVGI4VkU4SlFQcFZDdkJwVms2L1RBRGVVUmh2SgpFSFdHZlp1Njg0Z01SYkQ1YXg0RzYveUZ6VCtldGxyT3crdGY0NlBJcDJyT1V6QVhtZU5TN3ZLckpialpUMDJrClNTM29YMWVnTTdyYnI2VGFrbzhRVEFHN2U1VHFnbGdiWHNWZE5RdFRKcmluZ1FOR25YWlpranM2cVBXRE9HbHUKbmkySmVMNUpBb0dCQVBObDlBR2Q3TnpUTXRidEpGUjFDYTZyU1FoVzVwSVhJK3ZrdllJdkxTMldTYndPWFBNVQpwVXF4SHhCcE8yOGNVMmF4ZXk4T2JPdWRINm1od25LVURBUGFUaEpUeHJpVzRGQVVFY3Mwc1FaQzArZncyVmRxCmR2ZERqWDkwOExzdVk4MmVEVUtuYjVZSUZxWGI4WjZPOGZEMThTTlZjWjFOR3l3NUxCZDFLLzduQW9HQkFQcWIKaFR1c1JkNW4rdTdQSnRDWG95ZStRYXhOVjdQSGpNN2xJSzJwNmpiem83VTUvYUxobjRTOHdyRUt2UTF0TmU5LwpPMVVDakZvL0pQSnYyNlpZY0xNZ2J5ZitBZmFMbVJ0TzVtTHdheHRlWkVra1F1dXduWnNwT3RjRkN2NnZwSkpRCk1raDJrRElXODhDTE00cy9lTFd0eUd5NUJZZzZMQ2hEUzhhbGRsL0RBb0dBUit4cXJFZWtoS1NNTTJLa0I2a0cKRVcxZ0NXelVlWHNKREYzdGVoakN1dVBjS2d2OGY0QXNUK1FERC9Cb3RhNmpIb2QzcFRJWUVZKyttWHZKWDk1TApwcC9OempDZldsQ0xQRjZSMjRCWWgwY2NJei9TbWJoR0swNzA4eUwxTi9xL1Z6VkxLZFVjYmpNNXJnMU9XdEpXCndDT00vQ24xaHN3UUtZTkRlak1QcXlVQ2dZRUErZVZ3OHZNemJMYlZFNk4vZWd0cmgyc0J3OVlQK1Zhb1EzdFoKbmJMTXVlVXp2cmhJQWs3b0tZMnN1cXdSbnJ6alJxSGh3VUJjUW5XcTJ4SE52czk3K2pNQ2hLZVd2NG11ci90NgpZdmlJWlc4M28zUEVRNUFIYVR5d3pzN1ppdVFNd0ZXMS9tbzBHYTZuZTcyVE5XeWlhdEFUQnM5dEE4MjJVS1BpCmdRQm56TThDZ1lBd2s0QUUrbFRDRktXVWI1WDJPTEN0S0pXak9VNGZHekFSU0lTK2FlMXZ6eXZQbStBbHg5ekgKZHpQQlhldkxZT1g3UUIxcHpiYUpKa1dqc2J3bERUb2x2K3BrU1lLMDlOQ3A3T1dNRWxFR2tBQXJtY0RqUTVjNwpqTjJOcmxUVjJKaXlOTFhMME9lMlEyeGo5bnhQZmczWGxUV0dINHZ4bEhxMFhGcmU1eGZkUkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			oldCerts := generateOldCerts(
				types.NamespacedName{
					Name:      "platform-auth-cert",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "identity-provider-cert",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "saml-auth-cert",
					Namespace: nsName,
				},
			)
			initObjects = []client.Object{
				platformAuthSecretSecret,
				platformIdentityManagementSecret,
				identityProviderSecretSecret,
				samlAuthSecretSecret,
				authCR,
			}
			initObjects = append(initObjects, oldCerts...)

			for _, o := range initObjects {
				err := r.Create(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsAlreadyExists)))
			}
		})
		AfterEach(func() {
			for _, o := range initObjects {
				err := r.Delete(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
			}
		})
		It("will produce a function that signals to requeue after deleting v1alpha1 Certificates", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			remainingCertsCount := 4
			for _, fields := range fieldsList {
				fn := r.removeV1Alpha1Cert(authCR, fields)
				result, err := fn(ctx)
				c := &certmgrv1alpha1.Certificate{}
				testutil.ConfirmThatItRequeuesWithDelay(result, err, defaultLowerWait)
				err = r.Get(ctx, fields.NamespacedName, c)
				Expect(k8sErrors.IsNotFound(err)).To(BeTrue())
				remainingCertsCount--
				certList := &certmgrv1alpha1.CertificateList{}
				err = r.List(ctx, certList, client.InNamespace(nsName))
				Expect(err).ToNot(HaveOccurred())
				Expect(len(certList.Items)).To(Equal(remainingCertsCount))
			}
		})

		It("will produce a function that signals to requeue with an error when an unexpected error occurs", func() {
			rFailing := &AuthenticationReconciler{
				Client: &ctrlcommon.FallbackClient{
					Client: testutil.NewFakeTimeoutClient(cl),
					Reader: testutil.NewFakeTimeoutClient(cl),
				},
				DiscoveryClient: *dc,
			}
			fieldsList := generateCertificateFieldsList(authCR)
			remainingCertsCount := 4
			for _, fields := range fieldsList {
				fn := rFailing.removeV1Alpha1Cert(authCR, fields)
				result, err := fn(ctx)
				c := &certmgrv1alpha1.Certificate{}
				testutil.ConfirmThatItRequeuesWithError(result, err)
				err = r.Get(ctx, fields.NamespacedName, c)
				Expect(err).To(BeNil())
				certList := &certmgrv1alpha1.CertificateList{}
				err = r.List(ctx, certList, client.InNamespace(nsName))
				Expect(err).ToNot(HaveOccurred())
				Expect(len(certList.Items)).To(Equal(remainingCertsCount))
			}
		})

		It("will produce a function that signals to continue reconciling when no v1alpha1 Certificates are found", func() {
			By("ensuring no v1alpha1 Certificates are on the cluster")
			err := r.DeleteAllOf(ctx, &certmgrv1alpha1.Certificate{}, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			certList := &certmgrv1alpha1.CertificateList{}
			err = r.List(ctx, certList, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			Expect(len(certList.Items)).To(BeZero())
			By("looking for v1alpha1 Certificates to delete and finding none")
			fieldsList := generateCertificateFieldsList(authCR)
			for _, fields := range fieldsList {
				fn := r.removeV1Alpha1Cert(authCR, fields)
				result, err := fn(ctx)
				testutil.ConfirmThatItContinuesReconciling(result, err)
			}
			By("skipping deletion attempts when the CRD is not found")
			err = envtest.UninstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds", "certmanager.k8s.io_certificates_v1alpha1.yaml")},
			})
			Expect(err).ToNot(HaveOccurred())
			for _, fields := range fieldsList {
				fn := r.removeV1Alpha1Cert(authCR, fields)
				result, err := fn(ctx)
				testutil.ConfirmThatItContinuesReconciling(result, err)
			}
		})
	})

	Describe("removeV1Alpha1Certs", func() {
		BeforeEach(func() {
			crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds")},
			})
			Expect(crds).To(HaveLen(2))
			Expect(err).ToNot(HaveOccurred())
			authCR = &operatorv1alpha1.Authentication{
				TypeMeta: metav1.TypeMeta{
					APIVersion: "operator.ibm.com/v1alpha1",
					Kind:       "Authentication",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "example-authentication",
					Namespace: nsName,
				},
			}
			platformAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lSQU5HTVl2U3BlN3N1ejdnSmgzZ3Z1Q1F3RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE0xV2hjTgpNalV3T1RNd01URXlNVE0xV2pBZ01SNHdIQVlEVlFRREV4VndiR0YwWm05eWJTMWhkWFJvTFhObGNuWnBZMlV3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURHZkp3M1RRRkdYN0VWM2dkdVdFT1UKY0ZrenVUK2h0QWJscmxTbWpOSk52VzN5WDN4UW16aExvdEE3a1FJRkd1ZEN6TmRzSEZTSGRIYXZibThETG0zbgpuOWFzalgvSjNPdjVaeTVTOVZHR0FSeS9FR0QvblorVlZZOU1sM2o1Z3ZDRmVhMXp3cUlFQUhXV3FuaFdpUWlKCjg0eXA2cld1U0hUb2NtYVFvZElxQTN0a01RbWg2Zm9XRWljNlFkWVhuYmlzdm9pWDJ0cDVMdCs0MWhqakJFMFgKNU8rbFlSSEtmY2p4QXV1UzUvd05ERDkzcVQ2Mm1PWk9kV2N1WGFSY1phUnNsSFdpVk9lT21PSWdyUUV6dlV1SwpTZExkUFhOVFFoRnZmN3ZvZ0dIVFNJMWJwMFhWS1lCakFRT0pkdUZHNmhwQnhiZzM5MHprOTl2UlhxOWFpTndwCkFnTUJBQUdqZXpCNU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVkKTUJhQUZKVG41NkYzRXppRFBPdHFmV2c3SGh0Rm1SZlVNRGdHQTFVZEVRUXhNQytDRlhCc1lYUm1iM0p0TFdGMQpkR2d0YzJWeWRtbGpaWWNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBdDF5M0ZNUXlZc2lzTU5jd3l4b0lPQ0NnWk15emZUcEpTeW8raWp5SDdRa0hNMnFwTm85aXBvbXAKWmdGaFRQUE5HVmYvNWNVOFI3Q3JUVHRhZWVrb3FEeGxyS2h5U2w5bkF5VFdieVBJWThKbzBGMmVnelBtaUVIKwpBZ3ozVU82THZ4UkNGeG9qS3RUcWxacDVUOTdFTFgxQ1FKc0NCVGtQKyttK3R0V1RVclU1YWF6bFJRQjJlTC92CllVTDFMcTErUUp1NzZSRGlKVS9hWmlGaTFDWURNMkdPSDRDaXI0ZXFvUnhrVXV4TjQ2Sm5QWWlLMmRyY0Q1bEMKdWp6dGxjZ3p0cWwrK1lCalUzMnBBYzhtNEpOTGhFMU9SY0NuaXRnK0lOQVNMbkVSUXhSckJSUFdwSm80TXl1eQo4K2ZtQlJaMjlZL1k0Z0VMM09mMTFnM05UY2FsMkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeG55Y04wMEJSbCt4RmQ0SGJsaERsSEJaTTdrL29iUUc1YTVVcG96U1RiMXQ4bDk4ClVKczRTNkxRTzVFQ0JScm5Rc3pYYkJ4VWgzUjJyMjV2QXk1dDU1L1dySTEveWR6citXY3VVdlZSaGdFY3Z4QmcKLzUyZmxWV1BUSmQ0K1lMd2hYbXRjOEtpQkFCMWxxcDRWb2tJaWZPTXFlcTFya2gwNkhKbWtLSFNLZ043WkRFSgpvZW42RmhJbk9rSFdGNTI0ckw2SWw5cmFlUzdmdU5ZWTR3Uk5GK1R2cFdFUnluM0k4UUxya3VmOERRdy9kNmsrCnRwam1UblZuTGwya1hHV2tiSlIxb2xUbmpwamlJSzBCTTcxTGlrblMzVDF6VTBJUmIzKzc2SUJoMDBpTlc2ZEYKMVNtQVl3RURpWGJoUnVvYVFjVzROL2RNNVBmYjBWNnZXb2pjS1FJREFRQUJBb0lCQUhBRVB6MU9iaHZEUVhOdgozSTIvcmxRRm03SC9LQlFnUDR3NytIWU9IMW5VUUVwNjdQT294ZnFacGg4WDFTWUFhdWRlSjIxU0I3cHlWZERuCjZDckpkeWt6SWJvOEdSUlpZNnRiT2QrRHAwQ1RQQi93SkczZURRUUFSMkVZVXlPdGJBUklDVVc5WUNZV0JFYkYKYWlpY0tYK0JQYTlmVUsxTkl2MVVJdUlaRVR5M3Y2RWRrb3IrYWxoOFU4OXpmOFhmZmxhWHJDR0V2TzNFVmM2VgpmZSs2UzZVVXZxVGZBZzZ1YXFmWUhVR0hLMWRZWjlOVDFBU2VFLytQVkJyQ2ZwZ0JiRElBenI4K0loYUI1QVdpCktOWlJmd2NxVG5Pelc3bWsvQ3BtRHVpc1ZKc3I3eS8vWWdEUDgwNzFNZUNHcmwzbDVhSDRhUThobWc1Q0lBdm0KV1hMc25Ba0NnWUVBN0dHM1k4dXNMOWtZUzVPdmlMcCtxaUZYK1YrQWdac3pzTEVXRENOaEhvWFNqM2hjUkhGagplSnZSM3NSRWhVUHJoQ0NDY0ZhekRMbDlxOFhZWXp5TWNKc0xKZmR4Z0xUMXdzcWhtWWRDTHRQQ0hrbytTaWkyClMxNG4yUEN4cEJTd1o0L0M3STQvOUxYRE9kK2VySGtkckNqUW5rZCtCcTU1MjhnQ3FhY1ZFajhDZ1lFQTF2WEMKU09lR1ZSQnNvUC9FWjltVFhXaHUxU1dvby9aWm44YVlmeHlVQnpEODB1eDhHR2hKRFhnTEN3MDB6MjdpK0VCMwpGakI4RWhzT2IrRTk2V0l2TWJma1hhS0ZYdEVWRXk5b1F0V0NiUU1aeTBOUk9mNFFNcWczcWlvd0U2d0RYNldxCjFLdytjY0dXVW9FU3BVTFRlcnkwOVpBYmhVK0JZREM5Z256TXA1Y0NnWUFrVk95VUNTVUJBYlFyUVpyVVFCM2gKMWxnb094YU1WU2QvdStnd20ydDgvb0tiakp0WjViZXRQUDNuNkhERHJ1blBHQlFVWWk4SkFLV2hOanFKSGpCVAp5bkRQT0JZWSt6ZGU1amdxV2REQlU4amRVUG43K2YveTI1anlUaVJ2bk1KMFdITlVXcFRYN3V2L3hEQW1RRU5nClI3R3c4am9ibXN1ZURVTGpnb3ZKandLQmdRQ2dnbEhZYmtqNEs1TnhoSW43b1pOUUpETGVKWWlQSmR3MldleDAKdmJvcXhJR0VYZUVydUhNVUE1YjdZWmtWYXc4L242Tk1obGVlaldWeVZSWU50cXJXelNGUWFaSjlBbEppU1B2cApLOVIvNGRqWTFpTkkwbFQxL25YU01qNUQ4aVZ5dmhtWlJDUThmUGpxRWtjQjc2eEo4YTZOemxVK2JlZUZFOS91CkY1SVpjUUtCZ0dEeDN4OVhYbkxweWQ4TnRlTDIvdzh5a2taaFRvcFZURi9DdnpaRFhJRTEwd3ZXNWhGTlEzOFQKeUNiOTFCTC9kZWFGS3NQSVpYNnlROFNTbGxwTUlSZTBLWVdsN25qdDVtbUh0dzc1K054em8zRHlIQk1EWjNvLwpJeUNnbFhpMWhKSFJJTi8rNUwyK0lIMytad0dVQW00bWtCZlphTWhEL0FPdDJTR3JsbitMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="),
				},
			}
			platformIdentityManagementSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRQ2xraXpINnNGcUgyN3lYRXFXM2ZCREFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNek5hRncweQpOVEE1TXpBeE1USXhNek5hTUNjeEpUQWpCZ05WQkFNVEhIQnNZWFJtYjNKdExXbGtaVzUwYVhSNUxXMWhibUZuClpXMWxiblF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2k0OHZKc0orcnV2UGMKVnpzM3JvRlB4dGphZmFoOE9EZmFudFV2ZFdHMHpGZ0txdXFjUzBnbjJoN2FxUUlpUnlySDdnRlF1R3o2M1V1YQpzcHMyZFQ0TDIvOUdiU1N5SHFNN0JhOE1VVnhSRktEaSt3cytzMElPb2hHbmlxUTZBTXNUbjc3OExPK0E1UVVlCkJsMGVFMEJwYzY5RUowK0NORkZIRFBhemxBVWNxVm11RWlmY2JnMUVYWjk0RHk5SGNCeU5uNTRLakxNaFlqV1oKb3pmTUovd2J0MEpTYzdYemdmWGtIWWsyVFlVSy8vNGRzOS93U21UV2VkRHhCRW5KYkRCVkZxUi9Uc0RYWG1aeApPWVhSZllJa1VOTkozM1FlNDJyRFE0OGxCbG1IcGhScXlacjMvL2I2QSswVCs3bTliVEVsUjFVRWp6ak9hWTBKCk53YVFwTkl2QWdNQkFBR2pnWkl3Z1k4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWxPZm5vWGNUT0lNODYycDlhRHNlRzBXWkY5UXdUZ1lEVlIwUkJFY3dSWUljY0d4aApkR1p2Y20wdGFXUmxiblJwZEhrdGJXRnVZV2RsYldWdWRJSWxjR3hoZEdadmNtMHRhV1JsYm5ScGRIa3RiV0Z1CllXZGxiV1Z1ZEM0d01pMXpMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWUyWCtUaW9TdFVMYk9sS1EKcE8zWUY0TDlRazViSW9XVjl1RkRCOEZpQ2ppaTVDQm5CckJmcm8vd3d6YXhiWStONnBqZTBLZUJRVHFCbHc4TQpSMEhaSWF6UnVWUmlWaTFLS20vN3gzRHI5MEg4dnhVZ3IzZ3hiUm1Iemt5eEFJK2ZjNHdrUHA4LzB5WHArRVZPCm43QVNUTkNYd3RhS0pydEFLaGFUcW5CNVBGN3NIb0Rob1liYkNkaDNYb1gzUlhLR1RMNzlNSVJja1RkV1QyUDkKWWVPZmRTZWQwY2RPWW9xcEozSXF6dVBNOC9tZlZMVE5pRlJQUnNIQzVUelZUdDlzVDFjVWdpdXR1eHJuRnFWNwphMTlIL2pZYnhHdm1ZVmh3d2Y0NTh6LzRwRmJqcnBudzNrK2JGNGh0ZDBGT044WSs0cGZKK204cE5XZzRqZGFsClhiK0c0UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb3VQTHliQ2ZxN3J6M0ZjN042NkJUOGJZMm4yb2ZEZzMycDdWTDNWaHRNeFlDcXJxCm5FdElKOW9lMnFrQ0lrY3F4KzRCVUxocyt0MUxtcktiTm5VK0M5di9SbTBrc2g2ak93V3ZERkZjVVJTZzR2c0wKUHJOQ0RxSVJwNHFrT2dETEU1KysvQ3p2Z09VRkhnWmRIaE5BYVhPdlJDZFBnalJSUnd6MnM1UUZIS2xacmhJbgozRzROUkYyZmVBOHZSM0FjalorZUNveXpJV0kxbWFNM3pDZjhHN2RDVW5PMTg0SDE1QjJKTmsyRkN2LytIYlBmCjhFcGsxbm5ROFFSSnlXd3dWUmFrZjA3QTExNW1jVG1GMFgyQ0pGRFRTZDkwSHVOcXcwT1BKUVpaaDZZVWFzbWEKOS8vMitnUHRFL3U1dlcweEpVZFZCSTg0em1tTkNUY0drS1RTTHdJREFRQUJBb0lCQVFDR3JxdFZmTURKRWErSQp4R2VtUnBlTkN2RksxeE4wZ2xkTVlJQU0yWldNRkZuSG1FS2NNSExjNExFYVF4d01rNk4vNC84YWF5TlEyYUVsCnJBQkNLdmErZjR5M0FvK1E1MXczOVI4anBESWNxRjNPejV3Z243OUNzaWErelJlMURlcmJzdjRMTEd4cnV2RmMKUGc3SVMwcTY1bmhJZGVoNzFCNVFEUnYrcDZrQ1pJSXdwd093VjVnR0p5V0JoL0xCckJ6MkZpWUliQU9vNnNTdQpNbTZ5ZUhxM1dHcFUwN3BJUUZhdVRML0ZvTVNPbWs3NGxBN0ZuQWpoTVdxM0xnRzdiS28xS25aeXRpTndNTFcvCmNrSmFJT0hOaGJpYmJmLzF6TWxvREwyTlJxajlCbzRWc2RtZ0JqYmtSWno0VG5HWW9BaEVwVzNWVHgyaVd5a2QKT3ZiVkJyMGhBb0dCQU1JNXl0aGNobXpIaHl6dkJOQmd2Njl0M28zRStmM2Y3RTBOM24rTDdXb2NzS21uUjA2UgpNa01HOVhWK1ZVR2NvVXE0QTdNNmJ0a1V4SlBYR0wvNUpwWDZEVWFVRFBOVWJCS0djZjQra1BPeVVSSzMrMHBTCnBRb1ljUENSOU1mWTBodjBwMlZwSGhYVERxSUFJWGdpS01SSktYbnpOVFdRL2diRkZRYXpHM1ZkQW9HQkFOYXkKazZ3aStNMStFZVpHL083M0xEODdOMGloUUtNaEFLNkNHT2NFWXFWRnF1Rmw0djRXemdNdTdXUTZidTFsTVBaUgpQdnZReGRjWUNjM1FING4rNnUwMkNHTFRvZitGZFk4OERsM1kzYmp6M05iT2NjTSthcmJReHVvZHFOU0s2Qm1wCm9QU3MzM2M5blE1M0duRGtRbVlsNjhRNklKSDdjanhJS0ZScFQ4RDdBb0dBZlVNK2twbmh6R2hHd3ZFSVhzZjIKK0ZKWXRZQXpac3V6SCtMdys3dW9DOGFqSFZlWVFwQ2NKT1JwRERURkVZTE45MTJFYldRak4zZ1FhL1RPcm9rbQpuSlZmV0lTRmNhMmg0YlM1OGlveDNDbkY1ZGVvaHIrVVYxVjZDWDFvckRjbkV3YVBxM1RIQlhaUU9xVHc4UVMrCjNCRC9ZZm83OStjaUhnV2ZVT25VckxVQ2dZRUF6aTRXaE5QYzdiTHBTNlRXbUVLRW1vQ3FtYlJKMTU4RkFaRnMKaXNaNldVOXJTQ1JKZGt1K01lNXFDYnZYOVdFZFFSOUxCaGM3TjFJZGNDb3piNW1BVUtkNExEZ2pOYmtiNlo3NgpDUVFRQWVNbkxKNTdQODM4TzI2SjZDRHRscGVEUjhuUUNjak9uYnRzell4eHR3SnVCWnpiS3NuTHA0VzY4Y3MxCjk4SmUxZXNDZ1lCUENzdUhkZ1krdTRadHFvVnZ1YXlLU3BhUm1WRjFlU0krR1NaZ201aUQvQmRDTFN0SlVZeXYKNm5WZkxlWEJmWis0TG5kdG9hTWRNaVJuaE41T3dCUDk3ZlgvK2s0cmVpOUNjVUVObDJQT2NaN2NFQlYySllkVApJTmR2MjVhcnhraTJwMCs2cGw4Q0VWVFhCSy9kMkpLMk1MY244ZlRnMklPK3ZGNnNCZnM5YWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			identityProviderSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "identity-provider-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXekNDQWtPZ0F3SUJBZ0lSQUp2VHMwVDRrcitGL1VFY1dUanlWek13RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE16V2hjTgpNalV3T1RNd01URXlNVE16V2pBbE1TTXdJUVlEVlFRREV4cHdiR0YwWm05eWJTMXBaR1Z1ZEdsMGVTMXdjbTkyCmFXUmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLdjdtTzZuRHlCbTRlVngKNzFpa0J6bXMzSnNjcHBncGl5VDk2SFJ4R3p5WEJLb0owMytvaW1TZU55dmk0MkNEaHEyRlBCQmhucTJqZEdvdQptY2ZGTXZBVnpCcTRhMktkRWQyOEdVak1jYi92UkdPV2RKdS9xSUVYWjdyTUQwOVpwQ1ZOVDF6VEE2a29Gd1VnCmxyZjZuQW1UU0ttNlV2SlJSbjdXK0tFYW9NVktOWjdleVB6T004K0NPODEzaDZCUjQ3NVkxalROeVRTa3NyMTcKN3JBdVdYY0tQMWRNblFqZlFpdTFDUzlPNUdCZHk1cHpJdEppR2Zoa2lTNDlGS0Z3SkYyeU02OXNEOExBTDNQSApBRUs2UEtVL1BTaTJ3TzZxemFiNGVYRlhNZ1RCSjNwTWtsdkJmc2wwWTAvVVBjMUxxSWhuSnNxakVnYUwwNWNsCm5KSm0yQjBDQXdFQUFhT0JqakNCaXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTVTUrZWhkeE00Z3p6cmFuMW9PeDRiUlprWDFEQktCZ05WSFJFRVF6QkJnaHB3YkdGMApabTl5YlMxcFpHVnVkR2wwZVMxd2NtOTJhV1JsY29JamNHeGhkR1p2Y20wdGFXUmxiblJwZEhrdGNISnZkbWxrClpYSXVNREl0Y3k1emRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnVDVW5ZYVF5Tm5vWmlXTFZUVFF2dTAKK0FBTUZGWGpJT1VkMUV2ZnRyWVhwYkJRbHlJYU1qU2Iyd25oNEdBd25CWUh1emRzWFFwQ2t0WHRESmJvWnBsKwp6Mk1CVkJMYjNqaDJ4WGttdVVubWhFQmZFcXJicUo5L0puekd2NndkVGUxVmNLbUNCbHlsRjhvWDRQOGtIZVRhCmczMGFBdjRsK01VVldka29BMG1jUENSZHczOHN0VkdvQ3cyeUxPUWVNN1FtWHlkK2tLRzdMT0d1WFIxR2gzM3EKNjJYV1NDMzlFUEc5ZjZzMlFRWjJuMXZtMzMvTVJLZ3V5VFV6aHFZMnh2VzB0SXRJck80MUtZNDlxQ21zMEpxRQowVzJ0cEdxazd2aFFlUlhsUGFtZlhUWUZ6SE5pSnZLM1BjWjJBK2tCNXYyTVZ3TkZaRGl5WldlMDFtK2JNTUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcS91WTdxY1BJR2JoNVhIdldLUUhPYXpjbXh5bW1DbUxKUDNvZEhFYlBKY0VxZ25UCmY2aUtaSjQzSytMallJT0dyWVU4RUdHZXJhTjBhaTZaeDhVeThCWE1HcmhyWXAwUjNid1pTTXh4dis5RVk1WjAKbTcrb2dSZG51c3dQVDFta0pVMVBYTk1EcVNnWEJTQ1d0L3FjQ1pOSXFicFM4bEZHZnRiNG9ScWd4VW8xbnQ3SQovTTR6ejRJN3pYZUhvRkhqdmxqV05NM0pOS1N5dlh2dXNDNVpkd28vVjB5ZENOOUNLN1VKTDA3a1lGM0xtbk1pCjBtSVorR1NKTGowVW9YQWtYYkl6cjJ3UHdzQXZjOGNBUXJvOHBUODlLTGJBN3FyTnB2aDVjVmN5Qk1FbmVreVMKVzhGK3lYUmpUOVE5elV1b2lHY215cU1TQm92VGx5V2NrbWJZSFFJREFRQUJBb0lCQUdrQit0T2tueURLa0p6Mgpud3hCUXNRZFhxazZxaUY0SkNSVy82cXhNTThpNms4a0pzWG9VMit5QnIrK0RkVHRHYnN6QVlTREJrN0E0YUMvCmlWZW5lVDJNSVk0akVqWW83ekt5MmNGUVN4ZkU4TDNacktNNE41dHlmZnhaQWZRU0tKNDZBUDROUFV2NFZXM2wKQXdHY2U4K0E1VG4wc1JhUk4zalVxd1E2N1BUb0pVc2JMVGV2d3FFVUtGbVgzVXFaT3dGT2x0cmJ6bEhSN2hHNApQRGRKSEdvd0V0REhKYjlDY1huY1I4Q1hDdnh0R2xEYzdxSkVBNUNXV0NheTYzR3gydm5oa3EyTU9kNEdwb2UrCm1ydGJmZGFXWjB5YzJLUEphdG96R1NGWXBVQVluNyt4dVpMSFpGdWdNMnZOWDZ2RllvQ2ZzZHJXcmdXN2RBUWUKZG93UG9tVUNnWUVBeXZPcGQ3MWx4dXkrYUZKMEcyYkdidHMrYjkzNWhiU2ppNk5wa0lQSk5UcXUveTF5eC9xQwpybHlyZFI4MXZ6SUc2ZXFmNnAwVGZQdC9NZkVJdVJ1YVNiNkJBZll6VmdiMDVBa3pCTE45VG1iYkxBNEE3eU44CmZkbk13Q0dXdWFsaGNHaHN3T2ZvWU9oaW16TlVodVVrS012bHk3MlBybjA1NlRIOXdwQ3R2Z2NDZ1lFQTJPK3MKSWEwT2VSbVB6NVJmUVRFSi9BYlBpL3JUMGpOdUZkelFFZWQvU2x0dTBJSFJjckpnTGxDMG51YTRTQ2o3Nk10MgpERkhGc3dMT3piOTZlV3ZYQ2lhOEVEbVR4NmpYVXk0eitpcERaQlpHd1BTQXVXVkVTaS9TZG1JbGVMNFFaN0ZZCklUYnYwSVR2SE4rRXJRMjZIN093S2ZJeUxNb2NvYkJybmZzb2I3c0NnWUEzSXoyK1gwRmdhdjlML21LMjh4UWsKR0FKOWgvUDdoRmtPWGVZWE1nYWZKSU5ZcG5OUnExaUhvSHVnaFVzbjE2S1RPSUFiMEhMeitLdlUyS1JERGlHNwp1VHI1V25jVi95dlhMRHlsSVZLQTAyYm1NQ1BHMUlCRS9NQW96cmRSVjVnMlh0aDFERXhRejdIQ2NvNmJXM09ZCmRkVEhwb2Q3bzEveFgvaU9QSnBIVHdLQmdRRFRzSTE0RHplZ1ZLRlJIcWdWSlpWb3FmeTl5L1lIbU1oRDdVWGQKTXRtejVhVXRNb0VBTzdBL2dlRy9iY1ZHSlRnczR0NC9CMHkwY25qN3JXNEdMb1daRWxOU1FkMURhQzgyckU5cwpQdkdrS1ZqQjBkWUxGQmFmamlzQitxUTJQc0lqYlp0aVRnbVdvU0gwT3VsdE5ZZjZoNDNRWU5jMWZjU1N3MlZBCnRHV3hJUUtCZ1FDOHpQV0J6bUdYL3dHbHVWY1MvTTVRekxNWDlJcm10MjkwdHJqeXBxeFJ6ekJuT0xNQTRZd3IKRVBGUWhuY2JJOUdkN3VXeXhrZVNxcFh3WXNyazkyMGZuWUdFTGhOOHNDRVYrNVVEUStFT1R6ZDVxTCtLYkFpagp3U1BxakliS3d0V0t3TDRPcmg0clkwY1lqYmV2K0ZDUm4xOWNReHREa0libUQ3SGVtV1d5R3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			samlAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "saml-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRYkR4ZnNjdkNiVnZEdURDYXdheS9QVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNelJhRncweQpOVEE1TXpBeE1USXhNelJhTUJReEVqQVFCZ05WQkFNVENYTmhiV3d0WVhWMGFEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPNUZiYkVGUXU5Y2lKUXdvNUtUdXpOVGRQRWI5NjhEZW9CUTN4ajkKVWRjTjFiNDZuM3NDTFNNdnZ1Zk4zRTFHTnZQUW5YYVhMcUpWL0xPMTFjeDN5a2ZibEI4amgxRlF5eGpUQmk3NQpqYXpmVzJ6Z21iMy9ZaU0zRWtjaHFEakYwcElWaE9pUEVQWG1pYzJkNTAzTXgxUTNWL05UL1BpdDdmUUdoMTYvClFWd3lQeVBubyt3QTFIeDl0cS9PSWtFb0d3dzZ5S3M1VnhhQVNidUd1clZSQ0MvQytIeFJRYUdzcWdqZjhYOE0Kb1Y4cWZRU2tGVGg5dHpDMGlqd2dQT1NqVksyMys0OUptdm4waGxkZGxmMi9jYTlyNkxXaUNBb3JuMklPYTJaZQp1TWV2RE9Tc2ZlMVU1L3NqdllQSHhlUzVsWHdMSkNNcUU3WmxxbWg3bGZXVTR2VUNBd0VBQWFOWE1GVXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVsT2Zub1hjVE9JTTgKNjJwOWFEc2VHMFdaRjlRd0ZBWURWUjBSQkEwd0M0SUpjMkZ0YkMxaGRYUm9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBUGttdk5pbFFKdnN3TTduZVVMUFdYejhSd1NpNTBPcDNuQ3dtRVpTMWZHL2liMSt2ZmlZUUtkQXkvCkNoeTNWL0ZWR0p1empuWnFZRXZWRzZ1OTlnelllcTNlWkhsZG5kMDZJanRnbkVxcmVuWmp1Rm5tUnlxeHpnUVcKbjl2QmlOT0k4cUwvYS9USWNDRUZ3d2Y5ZjNWMktpNEZPTHhyeWhHc1VYMDRxaEhYNU9QdDZiTWtGSk5FUzBOawpqRkJWaDZycUlJK25FT2daQ0d5WHZiS2RiN01wRlNwQWVtcldaVHE2THFWcjJQUmUyZGV3R3lPcHdobHlFYUdyCnNSMlBESEpwa21HV3dvTkdmVUF6anArZU1JQkZySFB3bW96empkUFo5YUtmSUhIM0JxeWIrdGV6T2ZndXErRkQKZlR0a1AxU1AweGo3c0lDc2plMk1hbXNCcWIvMwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN2tWdHNRVkM3MXlJbERDamtwTzdNMU4wOFJ2M3J3TjZnRkRmR1AxUjF3M1Z2anFmCmV3SXRJeSsrNTgzY1RVWTI4OUNkZHBjdW9sWDhzN1hWekhmS1I5dVVIeU9IVVZETEdOTUdMdm1Ock45YmJPQ1oKdmY5aUl6Y1NSeUdvT01YU2toV0U2SThROWVhSnpaM25UY3pIVkRkWDgxUDgrSzN0OUFhSFhyOUJYREkvSStlago3QURVZkgyMnI4NGlRU2diRERySXF6bFhGb0JKdTRhNnRWRUlMOEw0ZkZGQm9heXFDTi94Znd5aFh5cDlCS1FWCk9IMjNNTFNLUENBODVLTlVyYmY3ajBtYStmU0dWMTJWL2I5eHIydm90YUlJQ2l1ZllnNXJabDY0eDY4TTVLeDkKN1ZUbit5TzlnOGZGNUxtVmZBc2tJeW9UdG1XcWFIdVY5WlRpOVFJREFRQUJBb0lCQVFEbFZNRzlEZGxjMU8xSAo1SUNyaGJFNk4ydG8zWWhKVk1uRlV4RkgxaG05S1QyK3VHSGpYVGJnbFFYanlrbnR2bFVKMnBLVUgvTHNvR0oyCi9kN255NnhQK1ZIWm5yS1JXM2YvVHF5MjdjNmt3dDRXTHg4S3RoRlkzNXFpQ0EwSGg2K2lseit6TG5BZW5XT3AKR2dBVTY3STJwb1hxVjc0MkJBSHhTNDlqYkNXV2U1SzcxeExGVGI4VkU4SlFQcFZDdkJwVms2L1RBRGVVUmh2SgpFSFdHZlp1Njg0Z01SYkQ1YXg0RzYveUZ6VCtldGxyT3crdGY0NlBJcDJyT1V6QVhtZU5TN3ZLckpialpUMDJrClNTM29YMWVnTTdyYnI2VGFrbzhRVEFHN2U1VHFnbGdiWHNWZE5RdFRKcmluZ1FOR25YWlpranM2cVBXRE9HbHUKbmkySmVMNUpBb0dCQVBObDlBR2Q3TnpUTXRidEpGUjFDYTZyU1FoVzVwSVhJK3ZrdllJdkxTMldTYndPWFBNVQpwVXF4SHhCcE8yOGNVMmF4ZXk4T2JPdWRINm1od25LVURBUGFUaEpUeHJpVzRGQVVFY3Mwc1FaQzArZncyVmRxCmR2ZERqWDkwOExzdVk4MmVEVUtuYjVZSUZxWGI4WjZPOGZEMThTTlZjWjFOR3l3NUxCZDFLLzduQW9HQkFQcWIKaFR1c1JkNW4rdTdQSnRDWG95ZStRYXhOVjdQSGpNN2xJSzJwNmpiem83VTUvYUxobjRTOHdyRUt2UTF0TmU5LwpPMVVDakZvL0pQSnYyNlpZY0xNZ2J5ZitBZmFMbVJ0TzVtTHdheHRlWkVra1F1dXduWnNwT3RjRkN2NnZwSkpRCk1raDJrRElXODhDTE00cy9lTFd0eUd5NUJZZzZMQ2hEUzhhbGRsL0RBb0dBUit4cXJFZWtoS1NNTTJLa0I2a0cKRVcxZ0NXelVlWHNKREYzdGVoakN1dVBjS2d2OGY0QXNUK1FERC9Cb3RhNmpIb2QzcFRJWUVZKyttWHZKWDk1TApwcC9OempDZldsQ0xQRjZSMjRCWWgwY2NJei9TbWJoR0swNzA4eUwxTi9xL1Z6VkxLZFVjYmpNNXJnMU9XdEpXCndDT00vQ24xaHN3UUtZTkRlak1QcXlVQ2dZRUErZVZ3OHZNemJMYlZFNk4vZWd0cmgyc0J3OVlQK1Zhb1EzdFoKbmJMTXVlVXp2cmhJQWs3b0tZMnN1cXdSbnJ6alJxSGh3VUJjUW5XcTJ4SE52czk3K2pNQ2hLZVd2NG11ci90NgpZdmlJWlc4M28zUEVRNUFIYVR5d3pzN1ppdVFNd0ZXMS9tbzBHYTZuZTcyVE5XeWlhdEFUQnM5dEE4MjJVS1BpCmdRQm56TThDZ1lBd2s0QUUrbFRDRktXVWI1WDJPTEN0S0pXak9VNGZHekFSU0lTK2FlMXZ6eXZQbStBbHg5ekgKZHpQQlhldkxZT1g3UUIxcHpiYUpKa1dqc2J3bERUb2x2K3BrU1lLMDlOQ3A3T1dNRWxFR2tBQXJtY0RqUTVjNwpqTjJOcmxUVjJKaXlOTFhMME9lMlEyeGo5bnhQZmczWGxUV0dINHZ4bEhxMFhGcmU1eGZkUkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			oldCerts := generateOldCerts(
				types.NamespacedName{
					Name:      "platform-auth-cert",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "identity-provider-cert",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				types.NamespacedName{
					Name:      "saml-auth-cert",
					Namespace: nsName,
				},
			)
			initObjects = []client.Object{
				platformAuthSecretSecret,
				platformIdentityManagementSecret,
				identityProviderSecretSecret,
				samlAuthSecretSecret,
				authCR,
			}
			initObjects = append(initObjects, oldCerts...)

			for _, o := range initObjects {
				err := r.Create(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsAlreadyExists)))
			}
		})

		AfterEach(func() {
			for _, o := range initObjects {
				err := r.Delete(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
			}
		})

		It("will produce a function that signals to requeue after deleting v1alpha1 Certificates", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			fn := r.removeV1Alpha1Certs(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItRequeuesWithDelay(result, err, defaultLowerWait)
			certList := &certmgrv1alpha1.CertificateList{}
			err = r.List(ctx, certList, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			Expect(len(certList.Items)).To(BeZero())
		})

		It("will produce a function that signals to requeue with an error when an unexpected error occurs", func() {
			rFailing := &AuthenticationReconciler{
				Client: &ctrlcommon.FallbackClient{
					Client: &testutil.FakeTimeoutClient{
						Client: cl,
					},
					Reader: &testutil.FakeTimeoutClient{
						Client: cl,
					},
				},
				DiscoveryClient: *dc,
			}
			remainingCertsCount := 4
			fieldsList := generateCertificateFieldsList(authCR)
			fn := rFailing.removeV1Alpha1Certs(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItRequeuesWithError(result, err)
			certList := &certmgrv1alpha1.CertificateList{}
			err = r.List(ctx, certList, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			Expect(len(certList.Items)).To(Equal(remainingCertsCount))
		})

		It("will produce a function that signals to continue reconciling when no v1alpha1 Certificates are found", func() {
			By("ensuring no v1alpha1 Certificates are on the cluster")
			err := r.DeleteAllOf(ctx, &certmgrv1alpha1.Certificate{}, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			certList := &certmgrv1alpha1.CertificateList{}
			err = r.List(ctx, certList, client.InNamespace(nsName))
			Expect(err).ToNot(HaveOccurred())
			Expect(len(certList.Items)).To(BeZero())
			By("looking for v1alpha1 Certificates to delete and finding none")
			fieldsList := generateCertificateFieldsList(authCR)
			fn := r.removeV1Alpha1Certs(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItContinuesReconciling(result, err)
			By("skipping deletion attempts when the CRD is not found")
			err = envtest.UninstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds", "certmanager.k8s.io_certificates_v1alpha1.yaml")},
			})
			Expect(err).ToNot(HaveOccurred())
			result, err = fn(ctx)
			testutil.ConfirmThatItContinuesReconciling(result, err)
		})
	})

	Describe("createV1CertificateIfNotPresent", Ordered, func() {
		BeforeEach(func() {
			crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds")},
			})
			Expect(crds).To(HaveLen(2))
			Expect(err).ToNot(HaveOccurred())
			authCR = &operatorv1alpha1.Authentication{
				TypeMeta: metav1.TypeMeta{
					APIVersion: "operator.ibm.com/v1alpha1",
					Kind:       "Authentication",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "example-authentication",
					Namespace: nsName,
				},
			}
			platformAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lSQU5HTVl2U3BlN3N1ejdnSmgzZ3Z1Q1F3RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE0xV2hjTgpNalV3T1RNd01URXlNVE0xV2pBZ01SNHdIQVlEVlFRREV4VndiR0YwWm05eWJTMWhkWFJvTFhObGNuWnBZMlV3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURHZkp3M1RRRkdYN0VWM2dkdVdFT1UKY0ZrenVUK2h0QWJscmxTbWpOSk52VzN5WDN4UW16aExvdEE3a1FJRkd1ZEN6TmRzSEZTSGRIYXZibThETG0zbgpuOWFzalgvSjNPdjVaeTVTOVZHR0FSeS9FR0QvblorVlZZOU1sM2o1Z3ZDRmVhMXp3cUlFQUhXV3FuaFdpUWlKCjg0eXA2cld1U0hUb2NtYVFvZElxQTN0a01RbWg2Zm9XRWljNlFkWVhuYmlzdm9pWDJ0cDVMdCs0MWhqakJFMFgKNU8rbFlSSEtmY2p4QXV1UzUvd05ERDkzcVQ2Mm1PWk9kV2N1WGFSY1phUnNsSFdpVk9lT21PSWdyUUV6dlV1SwpTZExkUFhOVFFoRnZmN3ZvZ0dIVFNJMWJwMFhWS1lCakFRT0pkdUZHNmhwQnhiZzM5MHprOTl2UlhxOWFpTndwCkFnTUJBQUdqZXpCNU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVkKTUJhQUZKVG41NkYzRXppRFBPdHFmV2c3SGh0Rm1SZlVNRGdHQTFVZEVRUXhNQytDRlhCc1lYUm1iM0p0TFdGMQpkR2d0YzJWeWRtbGpaWWNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBdDF5M0ZNUXlZc2lzTU5jd3l4b0lPQ0NnWk15emZUcEpTeW8raWp5SDdRa0hNMnFwTm85aXBvbXAKWmdGaFRQUE5HVmYvNWNVOFI3Q3JUVHRhZWVrb3FEeGxyS2h5U2w5bkF5VFdieVBJWThKbzBGMmVnelBtaUVIKwpBZ3ozVU82THZ4UkNGeG9qS3RUcWxacDVUOTdFTFgxQ1FKc0NCVGtQKyttK3R0V1RVclU1YWF6bFJRQjJlTC92CllVTDFMcTErUUp1NzZSRGlKVS9hWmlGaTFDWURNMkdPSDRDaXI0ZXFvUnhrVXV4TjQ2Sm5QWWlLMmRyY0Q1bEMKdWp6dGxjZ3p0cWwrK1lCalUzMnBBYzhtNEpOTGhFMU9SY0NuaXRnK0lOQVNMbkVSUXhSckJSUFdwSm80TXl1eQo4K2ZtQlJaMjlZL1k0Z0VMM09mMTFnM05UY2FsMkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeG55Y04wMEJSbCt4RmQ0SGJsaERsSEJaTTdrL29iUUc1YTVVcG96U1RiMXQ4bDk4ClVKczRTNkxRTzVFQ0JScm5Rc3pYYkJ4VWgzUjJyMjV2QXk1dDU1L1dySTEveWR6citXY3VVdlZSaGdFY3Z4QmcKLzUyZmxWV1BUSmQ0K1lMd2hYbXRjOEtpQkFCMWxxcDRWb2tJaWZPTXFlcTFya2gwNkhKbWtLSFNLZ043WkRFSgpvZW42RmhJbk9rSFdGNTI0ckw2SWw5cmFlUzdmdU5ZWTR3Uk5GK1R2cFdFUnluM0k4UUxya3VmOERRdy9kNmsrCnRwam1UblZuTGwya1hHV2tiSlIxb2xUbmpwamlJSzBCTTcxTGlrblMzVDF6VTBJUmIzKzc2SUJoMDBpTlc2ZEYKMVNtQVl3RURpWGJoUnVvYVFjVzROL2RNNVBmYjBWNnZXb2pjS1FJREFRQUJBb0lCQUhBRVB6MU9iaHZEUVhOdgozSTIvcmxRRm03SC9LQlFnUDR3NytIWU9IMW5VUUVwNjdQT294ZnFacGg4WDFTWUFhdWRlSjIxU0I3cHlWZERuCjZDckpkeWt6SWJvOEdSUlpZNnRiT2QrRHAwQ1RQQi93SkczZURRUUFSMkVZVXlPdGJBUklDVVc5WUNZV0JFYkYKYWlpY0tYK0JQYTlmVUsxTkl2MVVJdUlaRVR5M3Y2RWRrb3IrYWxoOFU4OXpmOFhmZmxhWHJDR0V2TzNFVmM2VgpmZSs2UzZVVXZxVGZBZzZ1YXFmWUhVR0hLMWRZWjlOVDFBU2VFLytQVkJyQ2ZwZ0JiRElBenI4K0loYUI1QVdpCktOWlJmd2NxVG5Pelc3bWsvQ3BtRHVpc1ZKc3I3eS8vWWdEUDgwNzFNZUNHcmwzbDVhSDRhUThobWc1Q0lBdm0KV1hMc25Ba0NnWUVBN0dHM1k4dXNMOWtZUzVPdmlMcCtxaUZYK1YrQWdac3pzTEVXRENOaEhvWFNqM2hjUkhGagplSnZSM3NSRWhVUHJoQ0NDY0ZhekRMbDlxOFhZWXp5TWNKc0xKZmR4Z0xUMXdzcWhtWWRDTHRQQ0hrbytTaWkyClMxNG4yUEN4cEJTd1o0L0M3STQvOUxYRE9kK2VySGtkckNqUW5rZCtCcTU1MjhnQ3FhY1ZFajhDZ1lFQTF2WEMKU09lR1ZSQnNvUC9FWjltVFhXaHUxU1dvby9aWm44YVlmeHlVQnpEODB1eDhHR2hKRFhnTEN3MDB6MjdpK0VCMwpGakI4RWhzT2IrRTk2V0l2TWJma1hhS0ZYdEVWRXk5b1F0V0NiUU1aeTBOUk9mNFFNcWczcWlvd0U2d0RYNldxCjFLdytjY0dXVW9FU3BVTFRlcnkwOVpBYmhVK0JZREM5Z256TXA1Y0NnWUFrVk95VUNTVUJBYlFyUVpyVVFCM2gKMWxnb094YU1WU2QvdStnd20ydDgvb0tiakp0WjViZXRQUDNuNkhERHJ1blBHQlFVWWk4SkFLV2hOanFKSGpCVAp5bkRQT0JZWSt6ZGU1amdxV2REQlU4amRVUG43K2YveTI1anlUaVJ2bk1KMFdITlVXcFRYN3V2L3hEQW1RRU5nClI3R3c4am9ibXN1ZURVTGpnb3ZKandLQmdRQ2dnbEhZYmtqNEs1TnhoSW43b1pOUUpETGVKWWlQSmR3MldleDAKdmJvcXhJR0VYZUVydUhNVUE1YjdZWmtWYXc4L242Tk1obGVlaldWeVZSWU50cXJXelNGUWFaSjlBbEppU1B2cApLOVIvNGRqWTFpTkkwbFQxL25YU01qNUQ4aVZ5dmhtWlJDUThmUGpxRWtjQjc2eEo4YTZOemxVK2JlZUZFOS91CkY1SVpjUUtCZ0dEeDN4OVhYbkxweWQ4TnRlTDIvdzh5a2taaFRvcFZURi9DdnpaRFhJRTEwd3ZXNWhGTlEzOFQKeUNiOTFCTC9kZWFGS3NQSVpYNnlROFNTbGxwTUlSZTBLWVdsN25qdDVtbUh0dzc1K054em8zRHlIQk1EWjNvLwpJeUNnbFhpMWhKSFJJTi8rNUwyK0lIMytad0dVQW00bWtCZlphTWhEL0FPdDJTR3JsbitMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="),
				},
			}
			platformIdentityManagementSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRQ2xraXpINnNGcUgyN3lYRXFXM2ZCREFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNek5hRncweQpOVEE1TXpBeE1USXhNek5hTUNjeEpUQWpCZ05WQkFNVEhIQnNZWFJtYjNKdExXbGtaVzUwYVhSNUxXMWhibUZuClpXMWxiblF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2k0OHZKc0orcnV2UGMKVnpzM3JvRlB4dGphZmFoOE9EZmFudFV2ZFdHMHpGZ0txdXFjUzBnbjJoN2FxUUlpUnlySDdnRlF1R3o2M1V1YQpzcHMyZFQ0TDIvOUdiU1N5SHFNN0JhOE1VVnhSRktEaSt3cytzMElPb2hHbmlxUTZBTXNUbjc3OExPK0E1UVVlCkJsMGVFMEJwYzY5RUowK0NORkZIRFBhemxBVWNxVm11RWlmY2JnMUVYWjk0RHk5SGNCeU5uNTRLakxNaFlqV1oKb3pmTUovd2J0MEpTYzdYemdmWGtIWWsyVFlVSy8vNGRzOS93U21UV2VkRHhCRW5KYkRCVkZxUi9Uc0RYWG1aeApPWVhSZllJa1VOTkozM1FlNDJyRFE0OGxCbG1IcGhScXlacjMvL2I2QSswVCs3bTliVEVsUjFVRWp6ak9hWTBKCk53YVFwTkl2QWdNQkFBR2pnWkl3Z1k4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWxPZm5vWGNUT0lNODYycDlhRHNlRzBXWkY5UXdUZ1lEVlIwUkJFY3dSWUljY0d4aApkR1p2Y20wdGFXUmxiblJwZEhrdGJXRnVZV2RsYldWdWRJSWxjR3hoZEdadmNtMHRhV1JsYm5ScGRIa3RiV0Z1CllXZGxiV1Z1ZEM0d01pMXpMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWUyWCtUaW9TdFVMYk9sS1EKcE8zWUY0TDlRazViSW9XVjl1RkRCOEZpQ2ppaTVDQm5CckJmcm8vd3d6YXhiWStONnBqZTBLZUJRVHFCbHc4TQpSMEhaSWF6UnVWUmlWaTFLS20vN3gzRHI5MEg4dnhVZ3IzZ3hiUm1Iemt5eEFJK2ZjNHdrUHA4LzB5WHArRVZPCm43QVNUTkNYd3RhS0pydEFLaGFUcW5CNVBGN3NIb0Rob1liYkNkaDNYb1gzUlhLR1RMNzlNSVJja1RkV1QyUDkKWWVPZmRTZWQwY2RPWW9xcEozSXF6dVBNOC9tZlZMVE5pRlJQUnNIQzVUelZUdDlzVDFjVWdpdXR1eHJuRnFWNwphMTlIL2pZYnhHdm1ZVmh3d2Y0NTh6LzRwRmJqcnBudzNrK2JGNGh0ZDBGT044WSs0cGZKK204cE5XZzRqZGFsClhiK0c0UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb3VQTHliQ2ZxN3J6M0ZjN042NkJUOGJZMm4yb2ZEZzMycDdWTDNWaHRNeFlDcXJxCm5FdElKOW9lMnFrQ0lrY3F4KzRCVUxocyt0MUxtcktiTm5VK0M5di9SbTBrc2g2ak93V3ZERkZjVVJTZzR2c0wKUHJOQ0RxSVJwNHFrT2dETEU1KysvQ3p2Z09VRkhnWmRIaE5BYVhPdlJDZFBnalJSUnd6MnM1UUZIS2xacmhJbgozRzROUkYyZmVBOHZSM0FjalorZUNveXpJV0kxbWFNM3pDZjhHN2RDVW5PMTg0SDE1QjJKTmsyRkN2LytIYlBmCjhFcGsxbm5ROFFSSnlXd3dWUmFrZjA3QTExNW1jVG1GMFgyQ0pGRFRTZDkwSHVOcXcwT1BKUVpaaDZZVWFzbWEKOS8vMitnUHRFL3U1dlcweEpVZFZCSTg0em1tTkNUY0drS1RTTHdJREFRQUJBb0lCQVFDR3JxdFZmTURKRWErSQp4R2VtUnBlTkN2RksxeE4wZ2xkTVlJQU0yWldNRkZuSG1FS2NNSExjNExFYVF4d01rNk4vNC84YWF5TlEyYUVsCnJBQkNLdmErZjR5M0FvK1E1MXczOVI4anBESWNxRjNPejV3Z243OUNzaWErelJlMURlcmJzdjRMTEd4cnV2RmMKUGc3SVMwcTY1bmhJZGVoNzFCNVFEUnYrcDZrQ1pJSXdwd093VjVnR0p5V0JoL0xCckJ6MkZpWUliQU9vNnNTdQpNbTZ5ZUhxM1dHcFUwN3BJUUZhdVRML0ZvTVNPbWs3NGxBN0ZuQWpoTVdxM0xnRzdiS28xS25aeXRpTndNTFcvCmNrSmFJT0hOaGJpYmJmLzF6TWxvREwyTlJxajlCbzRWc2RtZ0JqYmtSWno0VG5HWW9BaEVwVzNWVHgyaVd5a2QKT3ZiVkJyMGhBb0dCQU1JNXl0aGNobXpIaHl6dkJOQmd2Njl0M28zRStmM2Y3RTBOM24rTDdXb2NzS21uUjA2UgpNa01HOVhWK1ZVR2NvVXE0QTdNNmJ0a1V4SlBYR0wvNUpwWDZEVWFVRFBOVWJCS0djZjQra1BPeVVSSzMrMHBTCnBRb1ljUENSOU1mWTBodjBwMlZwSGhYVERxSUFJWGdpS01SSktYbnpOVFdRL2diRkZRYXpHM1ZkQW9HQkFOYXkKazZ3aStNMStFZVpHL083M0xEODdOMGloUUtNaEFLNkNHT2NFWXFWRnF1Rmw0djRXemdNdTdXUTZidTFsTVBaUgpQdnZReGRjWUNjM1FING4rNnUwMkNHTFRvZitGZFk4OERsM1kzYmp6M05iT2NjTSthcmJReHVvZHFOU0s2Qm1wCm9QU3MzM2M5blE1M0duRGtRbVlsNjhRNklKSDdjanhJS0ZScFQ4RDdBb0dBZlVNK2twbmh6R2hHd3ZFSVhzZjIKK0ZKWXRZQXpac3V6SCtMdys3dW9DOGFqSFZlWVFwQ2NKT1JwRERURkVZTE45MTJFYldRak4zZ1FhL1RPcm9rbQpuSlZmV0lTRmNhMmg0YlM1OGlveDNDbkY1ZGVvaHIrVVYxVjZDWDFvckRjbkV3YVBxM1RIQlhaUU9xVHc4UVMrCjNCRC9ZZm83OStjaUhnV2ZVT25VckxVQ2dZRUF6aTRXaE5QYzdiTHBTNlRXbUVLRW1vQ3FtYlJKMTU4RkFaRnMKaXNaNldVOXJTQ1JKZGt1K01lNXFDYnZYOVdFZFFSOUxCaGM3TjFJZGNDb3piNW1BVUtkNExEZ2pOYmtiNlo3NgpDUVFRQWVNbkxKNTdQODM4TzI2SjZDRHRscGVEUjhuUUNjak9uYnRzell4eHR3SnVCWnpiS3NuTHA0VzY4Y3MxCjk4SmUxZXNDZ1lCUENzdUhkZ1krdTRadHFvVnZ1YXlLU3BhUm1WRjFlU0krR1NaZ201aUQvQmRDTFN0SlVZeXYKNm5WZkxlWEJmWis0TG5kdG9hTWRNaVJuaE41T3dCUDk3ZlgvK2s0cmVpOUNjVUVObDJQT2NaN2NFQlYySllkVApJTmR2MjVhcnhraTJwMCs2cGw4Q0VWVFhCSy9kMkpLMk1MY244ZlRnMklPK3ZGNnNCZnM5YWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			identityProviderSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "identity-provider-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXekNDQWtPZ0F3SUJBZ0lSQUp2VHMwVDRrcitGL1VFY1dUanlWek13RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE16V2hjTgpNalV3T1RNd01URXlNVE16V2pBbE1TTXdJUVlEVlFRREV4cHdiR0YwWm05eWJTMXBaR1Z1ZEdsMGVTMXdjbTkyCmFXUmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLdjdtTzZuRHlCbTRlVngKNzFpa0J6bXMzSnNjcHBncGl5VDk2SFJ4R3p5WEJLb0owMytvaW1TZU55dmk0MkNEaHEyRlBCQmhucTJqZEdvdQptY2ZGTXZBVnpCcTRhMktkRWQyOEdVak1jYi92UkdPV2RKdS9xSUVYWjdyTUQwOVpwQ1ZOVDF6VEE2a29Gd1VnCmxyZjZuQW1UU0ttNlV2SlJSbjdXK0tFYW9NVktOWjdleVB6T004K0NPODEzaDZCUjQ3NVkxalROeVRTa3NyMTcKN3JBdVdYY0tQMWRNblFqZlFpdTFDUzlPNUdCZHk1cHpJdEppR2Zoa2lTNDlGS0Z3SkYyeU02OXNEOExBTDNQSApBRUs2UEtVL1BTaTJ3TzZxemFiNGVYRlhNZ1RCSjNwTWtsdkJmc2wwWTAvVVBjMUxxSWhuSnNxakVnYUwwNWNsCm5KSm0yQjBDQXdFQUFhT0JqakNCaXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTVTUrZWhkeE00Z3p6cmFuMW9PeDRiUlprWDFEQktCZ05WSFJFRVF6QkJnaHB3YkdGMApabTl5YlMxcFpHVnVkR2wwZVMxd2NtOTJhV1JsY29JamNHeGhkR1p2Y20wdGFXUmxiblJwZEhrdGNISnZkbWxrClpYSXVNREl0Y3k1emRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnVDVW5ZYVF5Tm5vWmlXTFZUVFF2dTAKK0FBTUZGWGpJT1VkMUV2ZnRyWVhwYkJRbHlJYU1qU2Iyd25oNEdBd25CWUh1emRzWFFwQ2t0WHRESmJvWnBsKwp6Mk1CVkJMYjNqaDJ4WGttdVVubWhFQmZFcXJicUo5L0puekd2NndkVGUxVmNLbUNCbHlsRjhvWDRQOGtIZVRhCmczMGFBdjRsK01VVldka29BMG1jUENSZHczOHN0VkdvQ3cyeUxPUWVNN1FtWHlkK2tLRzdMT0d1WFIxR2gzM3EKNjJYV1NDMzlFUEc5ZjZzMlFRWjJuMXZtMzMvTVJLZ3V5VFV6aHFZMnh2VzB0SXRJck80MUtZNDlxQ21zMEpxRQowVzJ0cEdxazd2aFFlUlhsUGFtZlhUWUZ6SE5pSnZLM1BjWjJBK2tCNXYyTVZ3TkZaRGl5WldlMDFtK2JNTUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcS91WTdxY1BJR2JoNVhIdldLUUhPYXpjbXh5bW1DbUxKUDNvZEhFYlBKY0VxZ25UCmY2aUtaSjQzSytMallJT0dyWVU4RUdHZXJhTjBhaTZaeDhVeThCWE1HcmhyWXAwUjNid1pTTXh4dis5RVk1WjAKbTcrb2dSZG51c3dQVDFta0pVMVBYTk1EcVNnWEJTQ1d0L3FjQ1pOSXFicFM4bEZHZnRiNG9ScWd4VW8xbnQ3SQovTTR6ejRJN3pYZUhvRkhqdmxqV05NM0pOS1N5dlh2dXNDNVpkd28vVjB5ZENOOUNLN1VKTDA3a1lGM0xtbk1pCjBtSVorR1NKTGowVW9YQWtYYkl6cjJ3UHdzQXZjOGNBUXJvOHBUODlLTGJBN3FyTnB2aDVjVmN5Qk1FbmVreVMKVzhGK3lYUmpUOVE5elV1b2lHY215cU1TQm92VGx5V2NrbWJZSFFJREFRQUJBb0lCQUdrQit0T2tueURLa0p6Mgpud3hCUXNRZFhxazZxaUY0SkNSVy82cXhNTThpNms4a0pzWG9VMit5QnIrK0RkVHRHYnN6QVlTREJrN0E0YUMvCmlWZW5lVDJNSVk0akVqWW83ekt5MmNGUVN4ZkU4TDNacktNNE41dHlmZnhaQWZRU0tKNDZBUDROUFV2NFZXM2wKQXdHY2U4K0E1VG4wc1JhUk4zalVxd1E2N1BUb0pVc2JMVGV2d3FFVUtGbVgzVXFaT3dGT2x0cmJ6bEhSN2hHNApQRGRKSEdvd0V0REhKYjlDY1huY1I4Q1hDdnh0R2xEYzdxSkVBNUNXV0NheTYzR3gydm5oa3EyTU9kNEdwb2UrCm1ydGJmZGFXWjB5YzJLUEphdG96R1NGWXBVQVluNyt4dVpMSFpGdWdNMnZOWDZ2RllvQ2ZzZHJXcmdXN2RBUWUKZG93UG9tVUNnWUVBeXZPcGQ3MWx4dXkrYUZKMEcyYkdidHMrYjkzNWhiU2ppNk5wa0lQSk5UcXUveTF5eC9xQwpybHlyZFI4MXZ6SUc2ZXFmNnAwVGZQdC9NZkVJdVJ1YVNiNkJBZll6VmdiMDVBa3pCTE45VG1iYkxBNEE3eU44CmZkbk13Q0dXdWFsaGNHaHN3T2ZvWU9oaW16TlVodVVrS012bHk3MlBybjA1NlRIOXdwQ3R2Z2NDZ1lFQTJPK3MKSWEwT2VSbVB6NVJmUVRFSi9BYlBpL3JUMGpOdUZkelFFZWQvU2x0dTBJSFJjckpnTGxDMG51YTRTQ2o3Nk10MgpERkhGc3dMT3piOTZlV3ZYQ2lhOEVEbVR4NmpYVXk0eitpcERaQlpHd1BTQXVXVkVTaS9TZG1JbGVMNFFaN0ZZCklUYnYwSVR2SE4rRXJRMjZIN093S2ZJeUxNb2NvYkJybmZzb2I3c0NnWUEzSXoyK1gwRmdhdjlML21LMjh4UWsKR0FKOWgvUDdoRmtPWGVZWE1nYWZKSU5ZcG5OUnExaUhvSHVnaFVzbjE2S1RPSUFiMEhMeitLdlUyS1JERGlHNwp1VHI1V25jVi95dlhMRHlsSVZLQTAyYm1NQ1BHMUlCRS9NQW96cmRSVjVnMlh0aDFERXhRejdIQ2NvNmJXM09ZCmRkVEhwb2Q3bzEveFgvaU9QSnBIVHdLQmdRRFRzSTE0RHplZ1ZLRlJIcWdWSlpWb3FmeTl5L1lIbU1oRDdVWGQKTXRtejVhVXRNb0VBTzdBL2dlRy9iY1ZHSlRnczR0NC9CMHkwY25qN3JXNEdMb1daRWxOU1FkMURhQzgyckU5cwpQdkdrS1ZqQjBkWUxGQmFmamlzQitxUTJQc0lqYlp0aVRnbVdvU0gwT3VsdE5ZZjZoNDNRWU5jMWZjU1N3MlZBCnRHV3hJUUtCZ1FDOHpQV0J6bUdYL3dHbHVWY1MvTTVRekxNWDlJcm10MjkwdHJqeXBxeFJ6ekJuT0xNQTRZd3IKRVBGUWhuY2JJOUdkN3VXeXhrZVNxcFh3WXNyazkyMGZuWUdFTGhOOHNDRVYrNVVEUStFT1R6ZDVxTCtLYkFpagp3U1BxakliS3d0V0t3TDRPcmg0clkwY1lqYmV2K0ZDUm4xOWNReHREa0libUQ3SGVtV1d5R3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			samlAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "saml-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRYkR4ZnNjdkNiVnZEdURDYXdheS9QVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNelJhRncweQpOVEE1TXpBeE1USXhNelJhTUJReEVqQVFCZ05WQkFNVENYTmhiV3d0WVhWMGFEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPNUZiYkVGUXU5Y2lKUXdvNUtUdXpOVGRQRWI5NjhEZW9CUTN4ajkKVWRjTjFiNDZuM3NDTFNNdnZ1Zk4zRTFHTnZQUW5YYVhMcUpWL0xPMTFjeDN5a2ZibEI4amgxRlF5eGpUQmk3NQpqYXpmVzJ6Z21iMy9ZaU0zRWtjaHFEakYwcElWaE9pUEVQWG1pYzJkNTAzTXgxUTNWL05UL1BpdDdmUUdoMTYvClFWd3lQeVBubyt3QTFIeDl0cS9PSWtFb0d3dzZ5S3M1VnhhQVNidUd1clZSQ0MvQytIeFJRYUdzcWdqZjhYOE0Kb1Y4cWZRU2tGVGg5dHpDMGlqd2dQT1NqVksyMys0OUptdm4waGxkZGxmMi9jYTlyNkxXaUNBb3JuMklPYTJaZQp1TWV2RE9Tc2ZlMVU1L3NqdllQSHhlUzVsWHdMSkNNcUU3WmxxbWg3bGZXVTR2VUNBd0VBQWFOWE1GVXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVsT2Zub1hjVE9JTTgKNjJwOWFEc2VHMFdaRjlRd0ZBWURWUjBSQkEwd0M0SUpjMkZ0YkMxaGRYUm9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBUGttdk5pbFFKdnN3TTduZVVMUFdYejhSd1NpNTBPcDNuQ3dtRVpTMWZHL2liMSt2ZmlZUUtkQXkvCkNoeTNWL0ZWR0p1empuWnFZRXZWRzZ1OTlnelllcTNlWkhsZG5kMDZJanRnbkVxcmVuWmp1Rm5tUnlxeHpnUVcKbjl2QmlOT0k4cUwvYS9USWNDRUZ3d2Y5ZjNWMktpNEZPTHhyeWhHc1VYMDRxaEhYNU9QdDZiTWtGSk5FUzBOawpqRkJWaDZycUlJK25FT2daQ0d5WHZiS2RiN01wRlNwQWVtcldaVHE2THFWcjJQUmUyZGV3R3lPcHdobHlFYUdyCnNSMlBESEpwa21HV3dvTkdmVUF6anArZU1JQkZySFB3bW96empkUFo5YUtmSUhIM0JxeWIrdGV6T2ZndXErRkQKZlR0a1AxU1AweGo3c0lDc2plMk1hbXNCcWIvMwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN2tWdHNRVkM3MXlJbERDamtwTzdNMU4wOFJ2M3J3TjZnRkRmR1AxUjF3M1Z2anFmCmV3SXRJeSsrNTgzY1RVWTI4OUNkZHBjdW9sWDhzN1hWekhmS1I5dVVIeU9IVVZETEdOTUdMdm1Ock45YmJPQ1oKdmY5aUl6Y1NSeUdvT01YU2toV0U2SThROWVhSnpaM25UY3pIVkRkWDgxUDgrSzN0OUFhSFhyOUJYREkvSStlago3QURVZkgyMnI4NGlRU2diRERySXF6bFhGb0JKdTRhNnRWRUlMOEw0ZkZGQm9heXFDTi94Znd5aFh5cDlCS1FWCk9IMjNNTFNLUENBODVLTlVyYmY3ajBtYStmU0dWMTJWL2I5eHIydm90YUlJQ2l1ZllnNXJabDY0eDY4TTVLeDkKN1ZUbit5TzlnOGZGNUxtVmZBc2tJeW9UdG1XcWFIdVY5WlRpOVFJREFRQUJBb0lCQVFEbFZNRzlEZGxjMU8xSAo1SUNyaGJFNk4ydG8zWWhKVk1uRlV4RkgxaG05S1QyK3VHSGpYVGJnbFFYanlrbnR2bFVKMnBLVUgvTHNvR0oyCi9kN255NnhQK1ZIWm5yS1JXM2YvVHF5MjdjNmt3dDRXTHg4S3RoRlkzNXFpQ0EwSGg2K2lseit6TG5BZW5XT3AKR2dBVTY3STJwb1hxVjc0MkJBSHhTNDlqYkNXV2U1SzcxeExGVGI4VkU4SlFQcFZDdkJwVms2L1RBRGVVUmh2SgpFSFdHZlp1Njg0Z01SYkQ1YXg0RzYveUZ6VCtldGxyT3crdGY0NlBJcDJyT1V6QVhtZU5TN3ZLckpialpUMDJrClNTM29YMWVnTTdyYnI2VGFrbzhRVEFHN2U1VHFnbGdiWHNWZE5RdFRKcmluZ1FOR25YWlpranM2cVBXRE9HbHUKbmkySmVMNUpBb0dCQVBObDlBR2Q3TnpUTXRidEpGUjFDYTZyU1FoVzVwSVhJK3ZrdllJdkxTMldTYndPWFBNVQpwVXF4SHhCcE8yOGNVMmF4ZXk4T2JPdWRINm1od25LVURBUGFUaEpUeHJpVzRGQVVFY3Mwc1FaQzArZncyVmRxCmR2ZERqWDkwOExzdVk4MmVEVUtuYjVZSUZxWGI4WjZPOGZEMThTTlZjWjFOR3l3NUxCZDFLLzduQW9HQkFQcWIKaFR1c1JkNW4rdTdQSnRDWG95ZStRYXhOVjdQSGpNN2xJSzJwNmpiem83VTUvYUxobjRTOHdyRUt2UTF0TmU5LwpPMVVDakZvL0pQSnYyNlpZY0xNZ2J5ZitBZmFMbVJ0TzVtTHdheHRlWkVra1F1dXduWnNwT3RjRkN2NnZwSkpRCk1raDJrRElXODhDTE00cy9lTFd0eUd5NUJZZzZMQ2hEUzhhbGRsL0RBb0dBUit4cXJFZWtoS1NNTTJLa0I2a0cKRVcxZ0NXelVlWHNKREYzdGVoakN1dVBjS2d2OGY0QXNUK1FERC9Cb3RhNmpIb2QzcFRJWUVZKyttWHZKWDk1TApwcC9OempDZldsQ0xQRjZSMjRCWWgwY2NJei9TbWJoR0swNzA4eUwxTi9xL1Z6VkxLZFVjYmpNNXJnMU9XdEpXCndDT00vQ24xaHN3UUtZTkRlak1QcXlVQ2dZRUErZVZ3OHZNemJMYlZFNk4vZWd0cmgyc0J3OVlQK1Zhb1EzdFoKbmJMTXVlVXp2cmhJQWs3b0tZMnN1cXdSbnJ6alJxSGh3VUJjUW5XcTJ4SE52czk3K2pNQ2hLZVd2NG11ci90NgpZdmlJWlc4M28zUEVRNUFIYVR5d3pzN1ppdVFNd0ZXMS9tbzBHYTZuZTcyVE5XeWlhdEFUQnM5dEE4MjJVS1BpCmdRQm56TThDZ1lBd2s0QUUrbFRDRktXVWI1WDJPTEN0S0pXak9VNGZHekFSU0lTK2FlMXZ6eXZQbStBbHg5ekgKZHpQQlhldkxZT1g3UUIxcHpiYUpKa1dqc2J3bERUb2x2K3BrU1lLMDlOQ3A3T1dNRWxFR2tBQXJtY0RqUTVjNwpqTjJOcmxUVjJKaXlOTFhMME9lMlEyeGo5bnhQZmczWGxUV0dINHZ4bEhxMFhGcmU1eGZkUkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			initObjects = []client.Object{
				platformAuthSecretSecret,
				platformIdentityManagementSecret,
				identityProviderSecretSecret,
				samlAuthSecretSecret,
				authCR,
			}

			for _, o := range initObjects {
				err := r.Create(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsAlreadyExists)))
			}
		})

		It("returns a function that signals to requeue with delay after creating a v1 Certificate", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			expectedCertificateCount := 0
			for _, fields := range fieldsList {
				fn := r.createV1CertificateIfNotPresent(authCR, fields)
				result, err := fn(ctx)
				testutil.ConfirmThatItRequeuesWithDelay(result, err, defaultLowerWait)
				expectedCertificateCount++
				certList := &certmgrv1.CertificateList{}
				Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
				Expect(len(certList.Items)).To(Equal(expectedCertificateCount))
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Succeed())
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app", fields.CommonName))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/instance", "ibm-iam-operator"))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/managed-by", "ibm-iam-operator"))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/name", fields.CommonName))
				Expect(cert.Spec.SecretName).To(Equal(fields.SecretName))
				Expect(cert.Spec.CommonName).To(Equal(fields.CommonName))
				Expect(cert.Spec.DNSNames).To(Equal(append(fields.DNSNames, fields.CommonName)))
				Expect(cert.Spec.IPAddresses).To(Equal(fields.IPAddresses))
				Expect(cert.Spec.IsCA).To(BeFalse())
				Expect(cert.Spec.IssuerRef.Name).To(Equal(DefaultClusterIssuer))
				Expect(cert.Spec.IssuerRef.Kind).To(Equal(certmgrv1.IssuerKind))
				Expect(*cert.Spec.Duration).To(Equal(metav1.Duration{Duration: 9552 * time.Hour}))
				Expect(*cert.Spec.RenewBefore).To(Equal(metav1.Duration{Duration: 2880 * time.Hour}))
				Expect(ctrlcommon.IsControllerOf(scheme, authCR, cert)).To(BeTrue())
			}
		})

		It("returns a function that signals to requeue with error if there is a failure while trying to create the v1 Certificate", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			By("simulating a failure to create the Certificate")
			timeoutClient := testutil.NewFakeTimeoutClient(cl)

			// Allowing Get gets to part of function that attempts to create a new Certificate
			timeoutClient.GetAllowed = true
			rFailing := &AuthenticationReconciler{
				Client: &ctrlcommon.FallbackClient{
					Client: timeoutClient,
					Reader: timeoutClient,
				},
				DiscoveryClient: *dc,
			}
			for _, fields := range fieldsList {
				fn := rFailing.createV1CertificateIfNotPresent(authCR, fields)
				result, err := fn(ctx)
				testutil.ConfirmThatItRequeuesWithError(result, err)
				certList := &certmgrv1.CertificateList{}
				Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
				Expect(len(certList.Items)).To(BeZero())
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Satisfy(k8sErrors.IsNotFound))
			}
		})

		It("returns a function that signals to continue reconciling when the v1 Certificate already exists", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			createdCerts := 0
			for _, fields := range fieldsList {
				// Set CommonName to a dummy value so that it's easy to see that dummy Certificate was
				// not updated
				dummyName := "dummy-name"
				Expect(r.Create(ctx, &certmgrv1.Certificate{
					ObjectMeta: metav1.ObjectMeta{
						Name:      fields.Name,
						Namespace: fields.Namespace,
					},
					TypeMeta: metav1.TypeMeta{
						APIVersion: "cert-manager.io/v1",
						Kind:       "Certificate",
					},
					Spec: certmgrv1.CertificateSpec{
						CommonName: dummyName,
					},
				})).To(Succeed())
				createdCerts++
				fn := r.createV1CertificateIfNotPresent(authCR, fields)
				result, err := fn(ctx)
				testutil.ConfirmThatItContinuesReconciling(result, err)
				certList := &certmgrv1.CertificateList{}
				Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
				Expect(len(certList.Items)).To(Equal(createdCerts))
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Succeed())
				Expect(cert.Spec.CommonName).To(Equal(dummyName))
			}
		})

		AfterEach(func() {
			for _, o := range initObjects {
				err := r.Delete(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
			}
			err := r.DeleteAllOf(ctx, &certmgrv1.Certificate{}, client.InNamespace(nsName))
			Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
		})
	})

	Describe("createV1CertificatesIfNotPresent", Ordered, func() {
		BeforeEach(func() {
			crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds")},
			})
			Expect(crds).To(HaveLen(2))
			Expect(err).ToNot(HaveOccurred())
			authCR = &operatorv1alpha1.Authentication{
				TypeMeta: metav1.TypeMeta{
					APIVersion: "operator.ibm.com/v1alpha1",
					Kind:       "Authentication",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "example-authentication",
					Namespace: nsName,
				},
			}
			platformAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lSQU5HTVl2U3BlN3N1ejdnSmgzZ3Z1Q1F3RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE0xV2hjTgpNalV3T1RNd01URXlNVE0xV2pBZ01SNHdIQVlEVlFRREV4VndiR0YwWm05eWJTMWhkWFJvTFhObGNuWnBZMlV3CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURHZkp3M1RRRkdYN0VWM2dkdVdFT1UKY0ZrenVUK2h0QWJscmxTbWpOSk52VzN5WDN4UW16aExvdEE3a1FJRkd1ZEN6TmRzSEZTSGRIYXZibThETG0zbgpuOWFzalgvSjNPdjVaeTVTOVZHR0FSeS9FR0QvblorVlZZOU1sM2o1Z3ZDRmVhMXp3cUlFQUhXV3FuaFdpUWlKCjg0eXA2cld1U0hUb2NtYVFvZElxQTN0a01RbWg2Zm9XRWljNlFkWVhuYmlzdm9pWDJ0cDVMdCs0MWhqakJFMFgKNU8rbFlSSEtmY2p4QXV1UzUvd05ERDkzcVQ2Mm1PWk9kV2N1WGFSY1phUnNsSFdpVk9lT21PSWdyUUV6dlV1SwpTZExkUFhOVFFoRnZmN3ZvZ0dIVFNJMWJwMFhWS1lCakFRT0pkdUZHNmhwQnhiZzM5MHprOTl2UlhxOWFpTndwCkFnTUJBQUdqZXpCNU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVkKTUJhQUZKVG41NkYzRXppRFBPdHFmV2c3SGh0Rm1SZlVNRGdHQTFVZEVRUXhNQytDRlhCc1lYUm1iM0p0TFdGMQpkR2d0YzJWeWRtbGpaWWNFZndBQUFZY1FBQUFBQUFBQUFBQUFBQUFBQUFBQUFUQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBdDF5M0ZNUXlZc2lzTU5jd3l4b0lPQ0NnWk15emZUcEpTeW8raWp5SDdRa0hNMnFwTm85aXBvbXAKWmdGaFRQUE5HVmYvNWNVOFI3Q3JUVHRhZWVrb3FEeGxyS2h5U2w5bkF5VFdieVBJWThKbzBGMmVnelBtaUVIKwpBZ3ozVU82THZ4UkNGeG9qS3RUcWxacDVUOTdFTFgxQ1FKc0NCVGtQKyttK3R0V1RVclU1YWF6bFJRQjJlTC92CllVTDFMcTErUUp1NzZSRGlKVS9hWmlGaTFDWURNMkdPSDRDaXI0ZXFvUnhrVXV4TjQ2Sm5QWWlLMmRyY0Q1bEMKdWp6dGxjZ3p0cWwrK1lCalUzMnBBYzhtNEpOTGhFMU9SY0NuaXRnK0lOQVNMbkVSUXhSckJSUFdwSm80TXl1eQo4K2ZtQlJaMjlZL1k0Z0VMM09mMTFnM05UY2FsMkE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeG55Y04wMEJSbCt4RmQ0SGJsaERsSEJaTTdrL29iUUc1YTVVcG96U1RiMXQ4bDk4ClVKczRTNkxRTzVFQ0JScm5Rc3pYYkJ4VWgzUjJyMjV2QXk1dDU1L1dySTEveWR6citXY3VVdlZSaGdFY3Z4QmcKLzUyZmxWV1BUSmQ0K1lMd2hYbXRjOEtpQkFCMWxxcDRWb2tJaWZPTXFlcTFya2gwNkhKbWtLSFNLZ043WkRFSgpvZW42RmhJbk9rSFdGNTI0ckw2SWw5cmFlUzdmdU5ZWTR3Uk5GK1R2cFdFUnluM0k4UUxya3VmOERRdy9kNmsrCnRwam1UblZuTGwya1hHV2tiSlIxb2xUbmpwamlJSzBCTTcxTGlrblMzVDF6VTBJUmIzKzc2SUJoMDBpTlc2ZEYKMVNtQVl3RURpWGJoUnVvYVFjVzROL2RNNVBmYjBWNnZXb2pjS1FJREFRQUJBb0lCQUhBRVB6MU9iaHZEUVhOdgozSTIvcmxRRm03SC9LQlFnUDR3NytIWU9IMW5VUUVwNjdQT294ZnFacGg4WDFTWUFhdWRlSjIxU0I3cHlWZERuCjZDckpkeWt6SWJvOEdSUlpZNnRiT2QrRHAwQ1RQQi93SkczZURRUUFSMkVZVXlPdGJBUklDVVc5WUNZV0JFYkYKYWlpY0tYK0JQYTlmVUsxTkl2MVVJdUlaRVR5M3Y2RWRrb3IrYWxoOFU4OXpmOFhmZmxhWHJDR0V2TzNFVmM2VgpmZSs2UzZVVXZxVGZBZzZ1YXFmWUhVR0hLMWRZWjlOVDFBU2VFLytQVkJyQ2ZwZ0JiRElBenI4K0loYUI1QVdpCktOWlJmd2NxVG5Pelc3bWsvQ3BtRHVpc1ZKc3I3eS8vWWdEUDgwNzFNZUNHcmwzbDVhSDRhUThobWc1Q0lBdm0KV1hMc25Ba0NnWUVBN0dHM1k4dXNMOWtZUzVPdmlMcCtxaUZYK1YrQWdac3pzTEVXRENOaEhvWFNqM2hjUkhGagplSnZSM3NSRWhVUHJoQ0NDY0ZhekRMbDlxOFhZWXp5TWNKc0xKZmR4Z0xUMXdzcWhtWWRDTHRQQ0hrbytTaWkyClMxNG4yUEN4cEJTd1o0L0M3STQvOUxYRE9kK2VySGtkckNqUW5rZCtCcTU1MjhnQ3FhY1ZFajhDZ1lFQTF2WEMKU09lR1ZSQnNvUC9FWjltVFhXaHUxU1dvby9aWm44YVlmeHlVQnpEODB1eDhHR2hKRFhnTEN3MDB6MjdpK0VCMwpGakI4RWhzT2IrRTk2V0l2TWJma1hhS0ZYdEVWRXk5b1F0V0NiUU1aeTBOUk9mNFFNcWczcWlvd0U2d0RYNldxCjFLdytjY0dXVW9FU3BVTFRlcnkwOVpBYmhVK0JZREM5Z256TXA1Y0NnWUFrVk95VUNTVUJBYlFyUVpyVVFCM2gKMWxnb094YU1WU2QvdStnd20ydDgvb0tiakp0WjViZXRQUDNuNkhERHJ1blBHQlFVWWk4SkFLV2hOanFKSGpCVAp5bkRQT0JZWSt6ZGU1amdxV2REQlU4amRVUG43K2YveTI1anlUaVJ2bk1KMFdITlVXcFRYN3V2L3hEQW1RRU5nClI3R3c4am9ibXN1ZURVTGpnb3ZKandLQmdRQ2dnbEhZYmtqNEs1TnhoSW43b1pOUUpETGVKWWlQSmR3MldleDAKdmJvcXhJR0VYZUVydUhNVUE1YjdZWmtWYXc4L242Tk1obGVlaldWeVZSWU50cXJXelNGUWFaSjlBbEppU1B2cApLOVIvNGRqWTFpTkkwbFQxL25YU01qNUQ4aVZ5dmhtWlJDUThmUGpxRWtjQjc2eEo4YTZOemxVK2JlZUZFOS91CkY1SVpjUUtCZ0dEeDN4OVhYbkxweWQ4TnRlTDIvdzh5a2taaFRvcFZURi9DdnpaRFhJRTEwd3ZXNWhGTlEzOFQKeUNiOTFCTC9kZWFGS3NQSVpYNnlROFNTbGxwTUlSZTBLWVdsN25qdDVtbUh0dzc1K054em8zRHlIQk1EWjNvLwpJeUNnbFhpMWhKSFJJTi8rNUwyK0lIMytad0dVQW00bWtCZlphTWhEL0FPdDJTR3JsbitMCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="),
				},
			}
			platformIdentityManagementSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "platform-identity-management",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZRENDQWtpZ0F3SUJBZ0lRQ2xraXpINnNGcUgyN3lYRXFXM2ZCREFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNek5hRncweQpOVEE1TXpBeE1USXhNek5hTUNjeEpUQWpCZ05WQkFNVEhIQnNZWFJtYjNKdExXbGtaVzUwYVhSNUxXMWhibUZuClpXMWxiblF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ2k0OHZKc0orcnV2UGMKVnpzM3JvRlB4dGphZmFoOE9EZmFudFV2ZFdHMHpGZ0txdXFjUzBnbjJoN2FxUUlpUnlySDdnRlF1R3o2M1V1YQpzcHMyZFQ0TDIvOUdiU1N5SHFNN0JhOE1VVnhSRktEaSt3cytzMElPb2hHbmlxUTZBTXNUbjc3OExPK0E1UVVlCkJsMGVFMEJwYzY5RUowK0NORkZIRFBhemxBVWNxVm11RWlmY2JnMUVYWjk0RHk5SGNCeU5uNTRLakxNaFlqV1oKb3pmTUovd2J0MEpTYzdYemdmWGtIWWsyVFlVSy8vNGRzOS93U21UV2VkRHhCRW5KYkRCVkZxUi9Uc0RYWG1aeApPWVhSZllJa1VOTkozM1FlNDJyRFE0OGxCbG1IcGhScXlacjMvL2I2QSswVCs3bTliVEVsUjFVRWp6ak9hWTBKCk53YVFwTkl2QWdNQkFBR2pnWkl3Z1k4d0RnWURWUjBQQVFIL0JBUURBZ1dnTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWxPZm5vWGNUT0lNODYycDlhRHNlRzBXWkY5UXdUZ1lEVlIwUkJFY3dSWUljY0d4aApkR1p2Y20wdGFXUmxiblJwZEhrdGJXRnVZV2RsYldWdWRJSWxjR3hoZEdadmNtMHRhV1JsYm5ScGRIa3RiV0Z1CllXZGxiV1Z1ZEM0d01pMXpMbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWUyWCtUaW9TdFVMYk9sS1EKcE8zWUY0TDlRazViSW9XVjl1RkRCOEZpQ2ppaTVDQm5CckJmcm8vd3d6YXhiWStONnBqZTBLZUJRVHFCbHc4TQpSMEhaSWF6UnVWUmlWaTFLS20vN3gzRHI5MEg4dnhVZ3IzZ3hiUm1Iemt5eEFJK2ZjNHdrUHA4LzB5WHArRVZPCm43QVNUTkNYd3RhS0pydEFLaGFUcW5CNVBGN3NIb0Rob1liYkNkaDNYb1gzUlhLR1RMNzlNSVJja1RkV1QyUDkKWWVPZmRTZWQwY2RPWW9xcEozSXF6dVBNOC9tZlZMVE5pRlJQUnNIQzVUelZUdDlzVDFjVWdpdXR1eHJuRnFWNwphMTlIL2pZYnhHdm1ZVmh3d2Y0NTh6LzRwRmJqcnBudzNrK2JGNGh0ZDBGT044WSs0cGZKK204cE5XZzRqZGFsClhiK0c0UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBb3VQTHliQ2ZxN3J6M0ZjN042NkJUOGJZMm4yb2ZEZzMycDdWTDNWaHRNeFlDcXJxCm5FdElKOW9lMnFrQ0lrY3F4KzRCVUxocyt0MUxtcktiTm5VK0M5di9SbTBrc2g2ak93V3ZERkZjVVJTZzR2c0wKUHJOQ0RxSVJwNHFrT2dETEU1KysvQ3p2Z09VRkhnWmRIaE5BYVhPdlJDZFBnalJSUnd6MnM1UUZIS2xacmhJbgozRzROUkYyZmVBOHZSM0FjalorZUNveXpJV0kxbWFNM3pDZjhHN2RDVW5PMTg0SDE1QjJKTmsyRkN2LytIYlBmCjhFcGsxbm5ROFFSSnlXd3dWUmFrZjA3QTExNW1jVG1GMFgyQ0pGRFRTZDkwSHVOcXcwT1BKUVpaaDZZVWFzbWEKOS8vMitnUHRFL3U1dlcweEpVZFZCSTg0em1tTkNUY0drS1RTTHdJREFRQUJBb0lCQVFDR3JxdFZmTURKRWErSQp4R2VtUnBlTkN2RksxeE4wZ2xkTVlJQU0yWldNRkZuSG1FS2NNSExjNExFYVF4d01rNk4vNC84YWF5TlEyYUVsCnJBQkNLdmErZjR5M0FvK1E1MXczOVI4anBESWNxRjNPejV3Z243OUNzaWErelJlMURlcmJzdjRMTEd4cnV2RmMKUGc3SVMwcTY1bmhJZGVoNzFCNVFEUnYrcDZrQ1pJSXdwd093VjVnR0p5V0JoL0xCckJ6MkZpWUliQU9vNnNTdQpNbTZ5ZUhxM1dHcFUwN3BJUUZhdVRML0ZvTVNPbWs3NGxBN0ZuQWpoTVdxM0xnRzdiS28xS25aeXRpTndNTFcvCmNrSmFJT0hOaGJpYmJmLzF6TWxvREwyTlJxajlCbzRWc2RtZ0JqYmtSWno0VG5HWW9BaEVwVzNWVHgyaVd5a2QKT3ZiVkJyMGhBb0dCQU1JNXl0aGNobXpIaHl6dkJOQmd2Njl0M28zRStmM2Y3RTBOM24rTDdXb2NzS21uUjA2UgpNa01HOVhWK1ZVR2NvVXE0QTdNNmJ0a1V4SlBYR0wvNUpwWDZEVWFVRFBOVWJCS0djZjQra1BPeVVSSzMrMHBTCnBRb1ljUENSOU1mWTBodjBwMlZwSGhYVERxSUFJWGdpS01SSktYbnpOVFdRL2diRkZRYXpHM1ZkQW9HQkFOYXkKazZ3aStNMStFZVpHL083M0xEODdOMGloUUtNaEFLNkNHT2NFWXFWRnF1Rmw0djRXemdNdTdXUTZidTFsTVBaUgpQdnZReGRjWUNjM1FING4rNnUwMkNHTFRvZitGZFk4OERsM1kzYmp6M05iT2NjTSthcmJReHVvZHFOU0s2Qm1wCm9QU3MzM2M5blE1M0duRGtRbVlsNjhRNklKSDdjanhJS0ZScFQ4RDdBb0dBZlVNK2twbmh6R2hHd3ZFSVhzZjIKK0ZKWXRZQXpac3V6SCtMdys3dW9DOGFqSFZlWVFwQ2NKT1JwRERURkVZTE45MTJFYldRak4zZ1FhL1RPcm9rbQpuSlZmV0lTRmNhMmg0YlM1OGlveDNDbkY1ZGVvaHIrVVYxVjZDWDFvckRjbkV3YVBxM1RIQlhaUU9xVHc4UVMrCjNCRC9ZZm83OStjaUhnV2ZVT25VckxVQ2dZRUF6aTRXaE5QYzdiTHBTNlRXbUVLRW1vQ3FtYlJKMTU4RkFaRnMKaXNaNldVOXJTQ1JKZGt1K01lNXFDYnZYOVdFZFFSOUxCaGM3TjFJZGNDb3piNW1BVUtkNExEZ2pOYmtiNlo3NgpDUVFRQWVNbkxKNTdQODM4TzI2SjZDRHRscGVEUjhuUUNjak9uYnRzell4eHR3SnVCWnpiS3NuTHA0VzY4Y3MxCjk4SmUxZXNDZ1lCUENzdUhkZ1krdTRadHFvVnZ1YXlLU3BhUm1WRjFlU0krR1NaZ201aUQvQmRDTFN0SlVZeXYKNm5WZkxlWEJmWis0TG5kdG9hTWRNaVJuaE41T3dCUDk3ZlgvK2s0cmVpOUNjVUVObDJQT2NaN2NFQlYySllkVApJTmR2MjVhcnhraTJwMCs2cGw4Q0VWVFhCSy9kMkpLMk1MY244ZlRnMklPK3ZGNnNCZnM5YWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			identityProviderSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "identity-provider-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXekNDQWtPZ0F3SUJBZ0lSQUp2VHMwVDRrcitGL1VFY1dUanlWek13RFFZSktvWklodmNOQVFFTEJRQXcKSERFYU1CZ0dBMVVFQXhNUlkzTXRZMkV0WTJWeWRHbG1hV05oZEdVd0hoY05NalF3T0RJNE1URXlNVE16V2hjTgpNalV3T1RNd01URXlNVE16V2pBbE1TTXdJUVlEVlFRREV4cHdiR0YwWm05eWJTMXBaR1Z1ZEdsMGVTMXdjbTkyCmFXUmxjakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLdjdtTzZuRHlCbTRlVngKNzFpa0J6bXMzSnNjcHBncGl5VDk2SFJ4R3p5WEJLb0owMytvaW1TZU55dmk0MkNEaHEyRlBCQmhucTJqZEdvdQptY2ZGTXZBVnpCcTRhMktkRWQyOEdVak1jYi92UkdPV2RKdS9xSUVYWjdyTUQwOVpwQ1ZOVDF6VEE2a29Gd1VnCmxyZjZuQW1UU0ttNlV2SlJSbjdXK0tFYW9NVktOWjdleVB6T004K0NPODEzaDZCUjQ3NVkxalROeVRTa3NyMTcKN3JBdVdYY0tQMWRNblFqZlFpdTFDUzlPNUdCZHk1cHpJdEppR2Zoa2lTNDlGS0Z3SkYyeU02OXNEOExBTDNQSApBRUs2UEtVL1BTaTJ3TzZxemFiNGVYRlhNZ1RCSjNwTWtsdkJmc2wwWTAvVVBjMUxxSWhuSnNxakVnYUwwNWNsCm5KSm0yQjBDQXdFQUFhT0JqakNCaXpBT0JnTlZIUThCQWY4RUJBTUNCYUF3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTVTUrZWhkeE00Z3p6cmFuMW9PeDRiUlprWDFEQktCZ05WSFJFRVF6QkJnaHB3YkdGMApabTl5YlMxcFpHVnVkR2wwZVMxd2NtOTJhV1JsY29JamNHeGhkR1p2Y20wdGFXUmxiblJwZEhrdGNISnZkbWxrClpYSXVNREl0Y3k1emRtTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQnVDVW5ZYVF5Tm5vWmlXTFZUVFF2dTAKK0FBTUZGWGpJT1VkMUV2ZnRyWVhwYkJRbHlJYU1qU2Iyd25oNEdBd25CWUh1emRzWFFwQ2t0WHRESmJvWnBsKwp6Mk1CVkJMYjNqaDJ4WGttdVVubWhFQmZFcXJicUo5L0puekd2NndkVGUxVmNLbUNCbHlsRjhvWDRQOGtIZVRhCmczMGFBdjRsK01VVldka29BMG1jUENSZHczOHN0VkdvQ3cyeUxPUWVNN1FtWHlkK2tLRzdMT0d1WFIxR2gzM3EKNjJYV1NDMzlFUEc5ZjZzMlFRWjJuMXZtMzMvTVJLZ3V5VFV6aHFZMnh2VzB0SXRJck80MUtZNDlxQ21zMEpxRQowVzJ0cEdxazd2aFFlUlhsUGFtZlhUWUZ6SE5pSnZLM1BjWjJBK2tCNXYyTVZ3TkZaRGl5WldlMDFtK2JNTUE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcS91WTdxY1BJR2JoNVhIdldLUUhPYXpjbXh5bW1DbUxKUDNvZEhFYlBKY0VxZ25UCmY2aUtaSjQzSytMallJT0dyWVU4RUdHZXJhTjBhaTZaeDhVeThCWE1HcmhyWXAwUjNid1pTTXh4dis5RVk1WjAKbTcrb2dSZG51c3dQVDFta0pVMVBYTk1EcVNnWEJTQ1d0L3FjQ1pOSXFicFM4bEZHZnRiNG9ScWd4VW8xbnQ3SQovTTR6ejRJN3pYZUhvRkhqdmxqV05NM0pOS1N5dlh2dXNDNVpkd28vVjB5ZENOOUNLN1VKTDA3a1lGM0xtbk1pCjBtSVorR1NKTGowVW9YQWtYYkl6cjJ3UHdzQXZjOGNBUXJvOHBUODlLTGJBN3FyTnB2aDVjVmN5Qk1FbmVreVMKVzhGK3lYUmpUOVE5elV1b2lHY215cU1TQm92VGx5V2NrbWJZSFFJREFRQUJBb0lCQUdrQit0T2tueURLa0p6Mgpud3hCUXNRZFhxazZxaUY0SkNSVy82cXhNTThpNms4a0pzWG9VMit5QnIrK0RkVHRHYnN6QVlTREJrN0E0YUMvCmlWZW5lVDJNSVk0akVqWW83ekt5MmNGUVN4ZkU4TDNacktNNE41dHlmZnhaQWZRU0tKNDZBUDROUFV2NFZXM2wKQXdHY2U4K0E1VG4wc1JhUk4zalVxd1E2N1BUb0pVc2JMVGV2d3FFVUtGbVgzVXFaT3dGT2x0cmJ6bEhSN2hHNApQRGRKSEdvd0V0REhKYjlDY1huY1I4Q1hDdnh0R2xEYzdxSkVBNUNXV0NheTYzR3gydm5oa3EyTU9kNEdwb2UrCm1ydGJmZGFXWjB5YzJLUEphdG96R1NGWXBVQVluNyt4dVpMSFpGdWdNMnZOWDZ2RllvQ2ZzZHJXcmdXN2RBUWUKZG93UG9tVUNnWUVBeXZPcGQ3MWx4dXkrYUZKMEcyYkdidHMrYjkzNWhiU2ppNk5wa0lQSk5UcXUveTF5eC9xQwpybHlyZFI4MXZ6SUc2ZXFmNnAwVGZQdC9NZkVJdVJ1YVNiNkJBZll6VmdiMDVBa3pCTE45VG1iYkxBNEE3eU44CmZkbk13Q0dXdWFsaGNHaHN3T2ZvWU9oaW16TlVodVVrS012bHk3MlBybjA1NlRIOXdwQ3R2Z2NDZ1lFQTJPK3MKSWEwT2VSbVB6NVJmUVRFSi9BYlBpL3JUMGpOdUZkelFFZWQvU2x0dTBJSFJjckpnTGxDMG51YTRTQ2o3Nk10MgpERkhGc3dMT3piOTZlV3ZYQ2lhOEVEbVR4NmpYVXk0eitpcERaQlpHd1BTQXVXVkVTaS9TZG1JbGVMNFFaN0ZZCklUYnYwSVR2SE4rRXJRMjZIN093S2ZJeUxNb2NvYkJybmZzb2I3c0NnWUEzSXoyK1gwRmdhdjlML21LMjh4UWsKR0FKOWgvUDdoRmtPWGVZWE1nYWZKSU5ZcG5OUnExaUhvSHVnaFVzbjE2S1RPSUFiMEhMeitLdlUyS1JERGlHNwp1VHI1V25jVi95dlhMRHlsSVZLQTAyYm1NQ1BHMUlCRS9NQW96cmRSVjVnMlh0aDFERXhRejdIQ2NvNmJXM09ZCmRkVEhwb2Q3bzEveFgvaU9QSnBIVHdLQmdRRFRzSTE0RHplZ1ZLRlJIcWdWSlpWb3FmeTl5L1lIbU1oRDdVWGQKTXRtejVhVXRNb0VBTzdBL2dlRy9iY1ZHSlRnczR0NC9CMHkwY25qN3JXNEdMb1daRWxOU1FkMURhQzgyckU5cwpQdkdrS1ZqQjBkWUxGQmFmamlzQitxUTJQc0lqYlp0aVRnbVdvU0gwT3VsdE5ZZjZoNDNRWU5jMWZjU1N3MlZBCnRHV3hJUUtCZ1FDOHpQV0J6bUdYL3dHbHVWY1MvTTVRekxNWDlJcm10MjkwdHJqeXBxeFJ6ekJuT0xNQTRZd3IKRVBGUWhuY2JJOUdkN3VXeXhrZVNxcFh3WXNyazkyMGZuWUdFTGhOOHNDRVYrNVVEUStFT1R6ZDVxTCtLYkFpagp3U1BxakliS3d0V0t3TDRPcmg0clkwY1lqYmV2K0ZDUm4xOWNReHREa0libUQ3SGVtV1d5R3c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			samlAuthSecretSecret = &corev1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Name:      "saml-auth-secret",
					Namespace: nsName,
				},
				Data: map[string][]byte{
					"ca.crt":  []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCRENDQWV5Z0F3SUJBZ0lRQzV1T0VGSDBDd0VwRWpXWmE0L2lnVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNVGxhRncweQpOakE0TWpneE1USXhNVGxhTUJ3eEdqQVlCZ05WQkFNVEVXTnpMV05oTFdObGNuUnBabWxqWVhSbE1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXVEY2ExWkVlRm55K1BrMHhNNnhTWTlUVDBTK28KQUpTQk1QQTNFbS85S3lobE9Ob1ZzdlpneHFEQmxRSlpxQWNKQXN1NDJMNno2TkhNRVJscmlRUGFVanU1UjlYTgprTXNjSGh6UzRLYzNOaDd6ZkJNRURodzFNeDVCbjdsMTZyM1BEclE5aDRhY0pZMjFmNEZlUTM5S0R5K0RMUThiCjFURUp1dVlUNU8zV2N0ZTNoNWQ4TGxpbFhJVUJKUmdFdGx3eHFqWCt1d24rT0p5aGR3ZWo2NmVVNWhURVZHaEoKZWY5K0d1QnFjdEFITjlKU2Q2ZFZNYUp3eG9hZEpERnpaVE1TQ3ZuSkZPTmxkM1V4YW1wUmtpdm9BUVdLOFFycwplTlI1anhOT0h6d1lXOG1TMnNXL3NFRmduTG5haWJtNXRJWjBrajRZS0srTFVTeW5iOUF1NnVQOUd3SURBUUFCCm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUKbE9mbm9YY1RPSU04NjJwOWFEc2VHMFdaRjlRd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGTzdlaUdZTkM2Mgo0RytnTy9zRC9GVnRpU0gwTnQ1cW94TFJLVndsc3ZIU0dTSGE4L21jWGRQdTNlWHlMazdUa09hUm5YV3NRMEphCjBaS2VWNDBzN3o4YmdaZGRsOGRKSGloQTg4c0FzTDdtWS9ZdjZZUTlCaGJ3eGJEWDVhbFpaMytMcFZXandRcW0KWUxLUWQyNVZLZkxlNHRRVjgyTDJRMTBZTjh1U0hVYUc4SnQ0b1I4MXR3YVp4Y1oxcE9ETGdkZ0N0a3BvSjhQWgpnemt1bHhzL1NOaXgrTGxhTTg1Z2x6L2V3eFJaR0RNVms5SGthdGdvYmtUNlZhK2NQdUV2bmFDVFQ5QzlUTGFkCk84bmtwMDBodW5nUG9Vb0pzQ3BNMHBCa3grYkNNd1IzT2pzUVBDdmYvTU84bzlKNWRjcXQyeTBhNVhPbGZsbEQKTlBoWGJOWm1qS3M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"),
					"tls.crt": []byte("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZtZ0F3SUJBZ0lRYkR4ZnNjdkNiVnZEdURDYXdheS9QVEFOQmdrcWhraUc5dzBCQVFzRkFEQWMKTVJvd0dBWURWUVFERXhGamN5MWpZUzFqWlhKMGFXWnBZMkYwWlRBZUZ3MHlOREE0TWpneE1USXhNelJhRncweQpOVEE1TXpBeE1USXhNelJhTUJReEVqQVFCZ05WQkFNVENYTmhiV3d0WVhWMGFEQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPNUZiYkVGUXU5Y2lKUXdvNUtUdXpOVGRQRWI5NjhEZW9CUTN4ajkKVWRjTjFiNDZuM3NDTFNNdnZ1Zk4zRTFHTnZQUW5YYVhMcUpWL0xPMTFjeDN5a2ZibEI4amgxRlF5eGpUQmk3NQpqYXpmVzJ6Z21iMy9ZaU0zRWtjaHFEakYwcElWaE9pUEVQWG1pYzJkNTAzTXgxUTNWL05UL1BpdDdmUUdoMTYvClFWd3lQeVBubyt3QTFIeDl0cS9PSWtFb0d3dzZ5S3M1VnhhQVNidUd1clZSQ0MvQytIeFJRYUdzcWdqZjhYOE0Kb1Y4cWZRU2tGVGg5dHpDMGlqd2dQT1NqVksyMys0OUptdm4waGxkZGxmMi9jYTlyNkxXaUNBb3JuMklPYTJaZQp1TWV2RE9Tc2ZlMVU1L3NqdllQSHhlUzVsWHdMSkNNcUU3WmxxbWg3bGZXVTR2VUNBd0VBQWFOWE1GVXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVsT2Zub1hjVE9JTTgKNjJwOWFEc2VHMFdaRjlRd0ZBWURWUjBSQkEwd0M0SUpjMkZ0YkMxaGRYUm9NQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBUGttdk5pbFFKdnN3TTduZVVMUFdYejhSd1NpNTBPcDNuQ3dtRVpTMWZHL2liMSt2ZmlZUUtkQXkvCkNoeTNWL0ZWR0p1empuWnFZRXZWRzZ1OTlnelllcTNlWkhsZG5kMDZJanRnbkVxcmVuWmp1Rm5tUnlxeHpnUVcKbjl2QmlOT0k4cUwvYS9USWNDRUZ3d2Y5ZjNWMktpNEZPTHhyeWhHc1VYMDRxaEhYNU9QdDZiTWtGSk5FUzBOawpqRkJWaDZycUlJK25FT2daQ0d5WHZiS2RiN01wRlNwQWVtcldaVHE2THFWcjJQUmUyZGV3R3lPcHdobHlFYUdyCnNSMlBESEpwa21HV3dvTkdmVUF6anArZU1JQkZySFB3bW96empkUFo5YUtmSUhIM0JxeWIrdGV6T2ZndXErRkQKZlR0a1AxU1AweGo3c0lDc2plMk1hbXNCcWIvMwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="),
					"tls.key": []byte("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBN2tWdHNRVkM3MXlJbERDamtwTzdNMU4wOFJ2M3J3TjZnRkRmR1AxUjF3M1Z2anFmCmV3SXRJeSsrNTgzY1RVWTI4OUNkZHBjdW9sWDhzN1hWekhmS1I5dVVIeU9IVVZETEdOTUdMdm1Ock45YmJPQ1oKdmY5aUl6Y1NSeUdvT01YU2toV0U2SThROWVhSnpaM25UY3pIVkRkWDgxUDgrSzN0OUFhSFhyOUJYREkvSStlago3QURVZkgyMnI4NGlRU2diRERySXF6bFhGb0JKdTRhNnRWRUlMOEw0ZkZGQm9heXFDTi94Znd5aFh5cDlCS1FWCk9IMjNNTFNLUENBODVLTlVyYmY3ajBtYStmU0dWMTJWL2I5eHIydm90YUlJQ2l1ZllnNXJabDY0eDY4TTVLeDkKN1ZUbit5TzlnOGZGNUxtVmZBc2tJeW9UdG1XcWFIdVY5WlRpOVFJREFRQUJBb0lCQVFEbFZNRzlEZGxjMU8xSAo1SUNyaGJFNk4ydG8zWWhKVk1uRlV4RkgxaG05S1QyK3VHSGpYVGJnbFFYanlrbnR2bFVKMnBLVUgvTHNvR0oyCi9kN255NnhQK1ZIWm5yS1JXM2YvVHF5MjdjNmt3dDRXTHg4S3RoRlkzNXFpQ0EwSGg2K2lseit6TG5BZW5XT3AKR2dBVTY3STJwb1hxVjc0MkJBSHhTNDlqYkNXV2U1SzcxeExGVGI4VkU4SlFQcFZDdkJwVms2L1RBRGVVUmh2SgpFSFdHZlp1Njg0Z01SYkQ1YXg0RzYveUZ6VCtldGxyT3crdGY0NlBJcDJyT1V6QVhtZU5TN3ZLckpialpUMDJrClNTM29YMWVnTTdyYnI2VGFrbzhRVEFHN2U1VHFnbGdiWHNWZE5RdFRKcmluZ1FOR25YWlpranM2cVBXRE9HbHUKbmkySmVMNUpBb0dCQVBObDlBR2Q3TnpUTXRidEpGUjFDYTZyU1FoVzVwSVhJK3ZrdllJdkxTMldTYndPWFBNVQpwVXF4SHhCcE8yOGNVMmF4ZXk4T2JPdWRINm1od25LVURBUGFUaEpUeHJpVzRGQVVFY3Mwc1FaQzArZncyVmRxCmR2ZERqWDkwOExzdVk4MmVEVUtuYjVZSUZxWGI4WjZPOGZEMThTTlZjWjFOR3l3NUxCZDFLLzduQW9HQkFQcWIKaFR1c1JkNW4rdTdQSnRDWG95ZStRYXhOVjdQSGpNN2xJSzJwNmpiem83VTUvYUxobjRTOHdyRUt2UTF0TmU5LwpPMVVDakZvL0pQSnYyNlpZY0xNZ2J5ZitBZmFMbVJ0TzVtTHdheHRlWkVra1F1dXduWnNwT3RjRkN2NnZwSkpRCk1raDJrRElXODhDTE00cy9lTFd0eUd5NUJZZzZMQ2hEUzhhbGRsL0RBb0dBUit4cXJFZWtoS1NNTTJLa0I2a0cKRVcxZ0NXelVlWHNKREYzdGVoakN1dVBjS2d2OGY0QXNUK1FERC9Cb3RhNmpIb2QzcFRJWUVZKyttWHZKWDk1TApwcC9OempDZldsQ0xQRjZSMjRCWWgwY2NJei9TbWJoR0swNzA4eUwxTi9xL1Z6VkxLZFVjYmpNNXJnMU9XdEpXCndDT00vQ24xaHN3UUtZTkRlak1QcXlVQ2dZRUErZVZ3OHZNemJMYlZFNk4vZWd0cmgyc0J3OVlQK1Zhb1EzdFoKbmJMTXVlVXp2cmhJQWs3b0tZMnN1cXdSbnJ6alJxSGh3VUJjUW5XcTJ4SE52czk3K2pNQ2hLZVd2NG11ci90NgpZdmlJWlc4M28zUEVRNUFIYVR5d3pzN1ppdVFNd0ZXMS9tbzBHYTZuZTcyVE5XeWlhdEFUQnM5dEE4MjJVS1BpCmdRQm56TThDZ1lBd2s0QUUrbFRDRktXVWI1WDJPTEN0S0pXak9VNGZHekFSU0lTK2FlMXZ6eXZQbStBbHg5ekgKZHpQQlhldkxZT1g3UUIxcHpiYUpKa1dqc2J3bERUb2x2K3BrU1lLMDlOQ3A3T1dNRWxFR2tBQXJtY0RqUTVjNwpqTjJOcmxUVjJKaXlOTFhMME9lMlEyeGo5bnhQZmczWGxUV0dINHZ4bEhxMFhGcmU1eGZkUkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="),
				},
			}
			initObjects = []client.Object{
				platformAuthSecretSecret,
				platformIdentityManagementSecret,
				identityProviderSecretSecret,
				samlAuthSecretSecret,
				authCR,
			}

			for _, o := range initObjects {
				err := r.Create(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsAlreadyExists)))
			}
		})

		It("returns a function that signals to requeue with delay after creating a v1 Certificate", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			expectedCertificateCount := 4
			fn := r.createV1CertificatesIfNotPresent(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItRequeuesWithDelay(result, err, defaultLowerWait)
			certList := &certmgrv1.CertificateList{}
			Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
			Expect(len(certList.Items)).To(Equal(expectedCertificateCount))
			for _, fields := range fieldsList {
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Succeed())
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app", fields.CommonName))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/instance", "ibm-iam-operator"))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/managed-by", "ibm-iam-operator"))
				Expect(cert.ObjectMeta.Labels).To(HaveKeyWithValue("app.kubernetes.io/name", fields.CommonName))
				Expect(cert.Spec.SecretName).To(Equal(fields.SecretName))
				Expect(cert.Spec.CommonName).To(Equal(fields.CommonName))
				Expect(cert.Spec.DNSNames).To(Equal(append(fields.DNSNames, fields.CommonName)))
				Expect(cert.Spec.IPAddresses).To(Equal(fields.IPAddresses))
				Expect(cert.Spec.IsCA).To(BeFalse())
				Expect(cert.Spec.IssuerRef.Name).To(Equal(DefaultClusterIssuer))
				Expect(cert.Spec.IssuerRef.Kind).To(Equal(certmgrv1.IssuerKind))
				Expect(*cert.Spec.Duration).To(Equal(metav1.Duration{Duration: 9552 * time.Hour}))
				Expect(*cert.Spec.RenewBefore).To(Equal(metav1.Duration{Duration: 2880 * time.Hour}))
				Expect(ctrlcommon.IsControllerOf(scheme, authCR, cert)).To(BeTrue())
			}
		})

		It("returns a function that signals to requeue with error if there is a failure while trying to create the v1 Certificate", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			By("simulating a failure to create the Certificate")
			timeoutClient := testutil.NewFakeTimeoutClient(cl)
			// Allowing Get gets to part of function that attempts to create a new Certificate
			timeoutClient.GetAllowed = true
			rFailing := &AuthenticationReconciler{
				Client: &ctrlcommon.FallbackClient{
					Client: timeoutClient,
					Reader: timeoutClient,
				},
				DiscoveryClient: *dc,
			}
			fn := rFailing.createV1CertificatesIfNotPresent(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItRequeuesWithError(result, err)
			certList := &certmgrv1.CertificateList{}
			Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
			Expect(len(certList.Items)).To(BeZero())
			for _, fields := range fieldsList {
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Satisfy(k8sErrors.IsNotFound))
			}
		})

		It("returns a function that signals to continue reconciling when the v1 Certificate already exists", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			createdCerts := 0
			dummyName := "dummy-name"
			for _, fields := range fieldsList {
				// Set CommonName to a dummy value so that it's easy to see that dummy Certificate was
				// not updated
				Expect(r.Create(ctx, &certmgrv1.Certificate{
					ObjectMeta: metav1.ObjectMeta{
						Name:      fields.Name,
						Namespace: fields.Namespace,
					},
					TypeMeta: metav1.TypeMeta{
						APIVersion: "cert-manager.io/v1",
						Kind:       "Certificate",
					},
					Spec: certmgrv1.CertificateSpec{
						CommonName: dummyName,
					},
				})).To(Succeed())
				createdCerts++
			}
			fn := r.createV1CertificatesIfNotPresent(authCR, fieldsList)
			result, err := fn(ctx)
			testutil.ConfirmThatItContinuesReconciling(result, err)
			certList := &certmgrv1.CertificateList{}
			Expect(r.List(ctx, certList, client.InNamespace(nsName))).To(Succeed())
			Expect(len(certList.Items)).To(Equal(createdCerts))
			for _, fields := range fieldsList {
				cert := &certmgrv1.Certificate{}
				Expect(r.Get(ctx, fields.NamespacedName, cert)).To(Succeed())
				Expect(cert.Spec.CommonName).To(Equal(dummyName))
			}
		})

		AfterEach(func() {
			for _, o := range initObjects {
				err := r.Delete(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
			}
			err := r.DeleteAllOf(ctx, &certmgrv1.Certificate{}, client.InNamespace(nsName))
			Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsNotFound)))
		})
	})

	Describe("generateCertificateFieldsList", func() {

		BeforeEach(func() {
			crds, err := envtest.InstallCRDs(cfg, envtest.CRDInstallOptions{
				Paths: []string{filepath.Join(".", "testdata", "crds")},
			})
			Expect(crds).To(HaveLen(2))
			Expect(err).ToNot(HaveOccurred())
			authCR = &operatorv1alpha1.Authentication{
				TypeMeta: metav1.TypeMeta{
					APIVersion: "operator.ibm.com/v1alpha1",
					Kind:       "Authentication",
				},
				ObjectMeta: metav1.ObjectMeta{
					Name:      "example-authentication",
					Namespace: nsName,
				},
			}
			initObjects = []client.Object{
				authCR,
			}

			for _, o := range initObjects {
				err := r.Create(ctx, o)
				Expect(err).To(Or(BeNil(), Satisfy(k8sErrors.IsAlreadyExists)))
			}
		})

		It("returns a slice of structs containing the unique fields to set for each Route", func() {
			fieldsList := generateCertificateFieldsList(authCR)
			namesList := []string{}
			expectedNamesList := []any{
				"platform-auth-cert",
				"identity-provider-cert",
				"platform-identity-management",
				"saml-auth-cert",
			}
			for _, fields := range fieldsList {
				namesList = append(namesList, fields.Name)
			}

			Expect(namesList).Should(ConsistOf(expectedNamesList...))

			for _, fields := range fieldsList {
				Expect(fields.Namespace).To(Equal(authCR.Namespace))
				switch fields.Name {
				case "identity-provider-cert":
					Expect(fields.DNSNames).To(ConsistOf(fmt.Sprintf("platform-identity-provider.%s.svc", authCR.Namespace)))
				case "platform-identity-management":
					Expect(fields.DNSNames).To(ConsistOf(fmt.Sprintf("platform-identity-management.%s.svc", authCR.Namespace)))
				default:
					Expect(fields.DNSNames).To(BeEmpty())
				}
			}
		})
	})
	AfterAll(func() {
		Expect(r.Delete(ctx, &corev1.Namespace{
			ObjectMeta: metav1.ObjectMeta{
				Name: nsName,
			},
		})).To(Succeed())
	})
})
